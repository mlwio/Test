{"file_contents":{"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"server/seed.ts":{"content":"import { connectDB } from \"./db\";\nimport { UserModel } from \"@shared/schema\";\nimport bcrypt from \"bcryptjs\";\n\nasync function seed() {\n  try {\n    console.log(\"Connecting to MongoDB...\");\n    await connectDB();\n    \n    console.log(\"Checking for existing admin user...\");\n    \n    // Check if admin user already exists\n    const existingUser = await UserModel.findOne({ username: \"mlwio\" });\n\n    if (existingUser) {\n      console.log(\"Admin user already exists\");\n      process.exit(0);\n    }\n\n    console.log(\"Creating admin user...\");\n    const hashedPassword = await bcrypt.hash(\"MLWIO0372\", 10);\n    \n    await UserModel.create({\n      username: \"mlwioapi\",\n      password: hashedPassword,\n    });\n\n    console.log(\"✓ Admin user created successfully\");\n    console.log(\"  Username: mlwioapi\");\n    console.log(\"  Password: MLWIO.0372\");\n    \n    process.exit(0);\n  } catch (error) {\n    console.error(\"Error seeding database:\", error);\n    process.exit(1);\n  }\n}\n\nseed();\n","size_bytes":978},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport session from \"express-session\";\nimport MongoStore from \"connect-mongo\";\nimport { insertContentItemSchema } from \"@shared/schema\";\nimport { fromZodError } from \"zod-validation-error\";\n\ndeclare module \"express-session\" {\n  interface SessionData {\n    userId: string;\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // ✅ Allow cookies over HTTPS (Render fix)\n  app.set(\"trust proxy\", 1);\n\n  // Session store configuration\n  const sessionStore = process.env.MONGODB_URI\n    ? MongoStore.create({\n        mongoUrl: process.env.MONGODB_URI,\n        dbName: \"mlwio\",\n        collectionName: \"sessions\",\n        ttl: 60 * 60 * 24 * 7, // 7 days\n        autoRemove: \"native\",\n      })\n    : undefined;\n\n  console.log(`✅ Session store: ${sessionStore ? 'MongoDB' : 'Memory (MemoryStore)'}`);\n  console.log(`✅ Environment: ${process.env.NODE_ENV || 'development'}`);\n\n  // Session middleware\n  app.use(\n    session({\n      secret:\n        process.env.SESSION_SECRET || \"mlwio-secret-key-change-in-production\",\n      resave: false,\n      saveUninitialized: false,\n      store: sessionStore,\n      cookie: {\n        secure: process.env.NODE_ENV === \"production\",\n        httpOnly: true,\n        maxAge: 1000 * 60 * 60 * 24 * 7, // 1 week\n        sameSite: process.env.NODE_ENV === \"production\" ? \"none\" : \"lax\",\n      },\n    })\n  );\n\n  // Authentication middleware\n  const requireAuth = (req: any, res: any, next: any) => {\n    if (!req.session.userId) {\n      console.log(`❌ Unauthorized access attempt`);\n      return res.status(401).json({ error: \"Unauthorized\" });\n    }\n    next();\n  };\n\n  // Login endpoint\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n\n      if (!username || !password) {\n        return res\n          .status(400)\n          .json({ error: \"Username and password required\" });\n      }\n\n      const user = await storage.verifyPassword(username, password);\n\n      if (!user) {\n        return res.status(401).json({ error: \"Wrong password\" });\n      }\n\n      req.session.userId = user.id;\n\n      console.log(`✅ Login successful - User: ${user.username}`);\n\n      // ✅ Explicitly save session\n      req.session.save((err) => {\n        if (err) {\n          console.error(\"❌ Session save error:\", err);\n          return res.status(500).json({ error: \"Failed to save session\" });\n        }\n        console.log(`✅ Session saved for user: ${user.username}`);\n        return res.json({ user: { id: user.id, username: user.username } });\n      });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      return res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Logout endpoint\n  app.post(\"/api/auth/logout\", (req, res) => {\n    req.session.destroy(() => {\n      res.json({ success: true });\n    });\n  });\n\n  // Check auth status\n  app.get(\"/api/auth/me\", async (req, res) => {\n    if (!req.session.userId) {\n      return res.status(401).json({ error: \"Not authenticated\" });\n    }\n\n    const user = await storage.getUser(req.session.userId);\n    if (!user) {\n      return res.status(401).json({ error: \"User not found\" });\n    }\n\n    return res.json({ user: { id: user.id, username: user.username } });\n  });\n\n  // Get all content (public endpoint)\n  app.get(\"/api/content\", async (req, res) => {\n    try {\n      const content = await storage.getAllContent();\n      return res.json(content);\n    } catch (error) {\n      console.error(\"Get content error:\", error);\n      return res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Search content (public endpoint) - MUST be before :id route\n  app.get(\"/api/content/search\", async (req, res) => {\n    try {\n      const { q, category } = req.query;\n\n      if (!q || typeof q !== \"string\") {\n        return res.status(400).json({ error: \"Search query required\" });\n      }\n\n      const content = await storage.searchContent(\n        q,\n        category && typeof category === \"string\" ? category : undefined\n      );\n\n      return res.json(content);\n    } catch (error) {\n      console.error(\"Search content error:\", error);\n      return res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Get content by ID (public endpoint)\n  app.get(\"/api/content/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const content = await storage.getContentById(id);\n\n      if (!content) {\n        return res.status(404).json({ error: \"Content not found\" });\n      }\n\n      return res.json(content);\n    } catch (error: any) {\n      // Handle invalid MongoDB ObjectId format\n      if (error.name === 'CastError' || error.kind === 'ObjectId') {\n        return res.status(404).json({ error: \"Content not found\" });\n      }\n      console.error(\"Get content by ID error:\", error);\n      return res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Create content\n  app.post(\"/api/content\", requireAuth, async (req, res) => {\n    try {\n      const result = insertContentItemSchema.safeParse(req.body);\n\n      if (!result.success) {\n        const validationError = fromZodError(result.error);\n        return res.status(400).json({ error: validationError.message });\n      }\n\n      const content = await storage.createContent(result.data);\n      \n      await storage.createUploadLog({ contentTitle: content.title });\n      \n      return res.json(content);\n    } catch (error) {\n      console.error(\"Create content error:\", error);\n      return res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Update content\n  app.put(\"/api/content/:id\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const result = insertContentItemSchema.safeParse(req.body);\n\n      if (!result.success) {\n        const validationError = fromZodError(result.error);\n        return res.status(400).json({ error: validationError.message });\n      }\n\n      const content = await storage.updateContent(id, result.data);\n\n      if (!content) {\n        return res.status(404).json({ error: \"Content not found\" });\n      }\n\n      return res.json(content);\n    } catch (error) {\n      console.error(\"Update content error:\", error);\n      return res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Delete content\n  app.delete(\"/api/content/:id\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { username, password } = req.body;\n\n      if (!username || !password) {\n        return res\n          .status(400)\n          .json({ error: \"Username and password required\" });\n      }\n\n      const user = await storage.verifyPassword(username, password);\n\n      if (!user) {\n        return res.status(401).json({ error: \"Wrong password\" });\n      }\n\n      const deleted = await storage.deleteContent(id);\n\n      if (!deleted) {\n        return res.status(404).json({ error: \"Content not found\" });\n      }\n\n      return res.json({ success: true, message: \"Content deleted successfully\" });\n    } catch (error) {\n      console.error(\"Delete content error:\", error);\n      return res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":7398},"client/src/components/examples/ContentList.tsx":{"content":"import { ContentList } from '../ContentList';\n\nexport default function ContentListExample() {\n  const mockItems = [\n    {\n      id: '1',\n      title: '365 Days to the Wedding',\n      category: 'Movie',\n      thumbnail: 'https://placehold.co/200x300/1e293b/94a3b8?text=Movie+1',\n      driveLink: 'https://example.com',\n      seasons: null,\n    },\n    {\n      id: '2',\n      title: 'Another Movie',\n      category: 'Movie',\n      thumbnail: 'https://placehold.co/200x300/1e293b/94a3b8?text=Movie+2',\n      driveLink: 'https://example.com',\n      seasons: null,\n    },\n    {\n      id: '3',\n      title: 'Attack on Titan',\n      category: 'Anime',\n      thumbnail: 'https://placehold.co/200x300/1e293b/94a3b8?text=Anime',\n      driveLink: null,\n      seasons: [\n        {\n          seasonNumber: 1,\n          episodes: Array.from({ length: 12 }, (_, i) => ({\n            episodeNumber: i + 1,\n            link: `https://example.com/s1e${i + 1}`,\n          })),\n        },\n      ],\n    },\n  ];\n\n  return <ContentList items={mockItems} category=\"Movie\" />;\n}\n","size_bytes":1053},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/Header.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { useLocation } from \"wouter\";\n\ninterface HeaderProps {\n  onActionClick: () => void;\n  actionLabel: string;\n}\n\nexport function Header({ onActionClick, actionLabel }: HeaderProps) {\n  return (\n    <header className=\"border-b border-border bg-card\">\n      <div className=\"flex items-center justify-between px-6 py-4\">\n        <h1 className=\"text-xl font-semibold text-foreground\" data-testid=\"text-brand\">\n          MLWIO API\n        </h1>\n        <Button \n          onClick={onActionClick}\n          data-testid={`button-${actionLabel.toLowerCase()}`}\n        >\n          {actionLabel}\n        </Button>\n      </div>\n    </header>\n  );\n}\n","size_bytes":693},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/examples/UploadPage.tsx":{"content":"import UploadPage from '../../pages/UploadPage';\nimport { Toaster } from '@/components/ui/toaster';\n\nexport default function UploadPageExample() {\n  return (\n    <>\n      <UploadPage />\n      <Toaster />\n    </>\n  );\n}\n","size_bytes":219},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 210 3% 98%;\n\n  --foreground: 210 6% 12%;\n\n  --border: 210 3% 88%;\n\n  --card: 210 3% 96%;\n\n  --card-foreground: 210 6% 15%;\n\n  --card-border: 210 3% 90%;\n\n  --sidebar: 210 3% 94%;\n\n  --sidebar-foreground: 210 6% 18%;\n\n  --sidebar-border: 210 3% 86%;\n\n  --sidebar-primary: 213 94% 48%;\n\n  --sidebar-primary-foreground: 210 100% 98%;\n\n  --sidebar-accent: 210 8% 88%;\n\n  --sidebar-accent-foreground: 210 6% 20%;\n\n  --sidebar-ring: 213 94% 48%;\n\n  --popover: 210 3% 92%;\n\n  --popover-foreground: 210 6% 18%;\n\n  --popover-border: 210 3% 84%;\n\n  --primary: 213 94% 48%;\n\n  --primary-foreground: 210 100% 98%;\n\n  --secondary: 210 6% 86%;\n\n  --secondary-foreground: 210 8% 22%;\n\n  --muted: 210 10% 90%;\n\n  --muted-foreground: 210 6% 40%;\n\n  --accent: 210 12% 88%;\n\n  --accent-foreground: 210 8% 25%;\n\n  --destructive: 0 84% 42%;\n\n  --destructive-foreground: 0 100% 98%;\n\n  --input: 210 8% 75%;\n  --ring: 213 94% 48%;\n  --chart-1: 213 94% 48%;\n  --chart-2: 195 88% 45%;\n  --chart-3: 165 82% 42%;\n  --chart-4: 285 78% 58%;\n  --chart-5: 340 75% 55%;\n\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(210 20% 20% / 0.02);\n  --shadow-xs: 0px 2px 0px 0px hsl(210 20% 20% / 0.04);\n  --shadow-sm: 0px 2px 0px 0px hsl(210 20% 20% / 0.06), 0px 1px 2px -1px hsl(210 20% 20% / 0.08);\n  --shadow: 0px 2px 0px 0px hsl(210 20% 20% / 0.08), 0px 1px 2px -1px hsl(210 20% 20% / 0.10);\n  --shadow-md: 0px 2px 0px 0px hsl(210 20% 20% / 0.10), 0px 2px 4px -1px hsl(210 20% 20% / 0.12);\n  --shadow-lg: 0px 2px 0px 0px hsl(210 20% 20% / 0.12), 0px 4px 6px -1px hsl(210 20% 20% / 0.14);\n  --shadow-xl: 0px 2px 0px 0px hsl(210 20% 20% / 0.14), 0px 8px 10px -1px hsl(210 20% 20% / 0.16);\n  --shadow-2xl: 0px 2px 0px 0px hsl(210 20% 20% / 0.18);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 210 6% 8%;\n\n  --foreground: 210 8% 92%;\n\n  --border: 210 5% 18%;\n\n  --card: 210 5% 10%;\n\n  --card-foreground: 210 8% 90%;\n\n  --card-border: 210 5% 14%;\n\n  --sidebar: 210 5% 12%;\n\n  --sidebar-foreground: 210 8% 88%;\n\n  --sidebar-border: 210 5% 16%;\n\n  --sidebar-primary: 213 94% 52%;\n\n  --sidebar-primary-foreground: 210 100% 98%;\n\n  --sidebar-accent: 210 8% 18%;\n\n  --sidebar-accent-foreground: 210 10% 85%;\n\n  --sidebar-ring: 213 94% 52%;\n\n  --popover: 210 5% 14%;\n\n  --popover-foreground: 210 8% 88%;\n\n  --popover-border: 210 5% 20%;\n\n  --primary: 213 94% 52%;\n\n  --primary-foreground: 210 100% 98%;\n\n  --secondary: 210 6% 20%;\n\n  --secondary-foreground: 210 8% 85%;\n\n  --muted: 210 10% 16%;\n\n  --muted-foreground: 210 8% 65%;\n\n  --accent: 210 12% 18%;\n\n  --accent-foreground: 210 10% 82%;\n\n  --destructive: 0 84% 48%;\n\n  --destructive-foreground: 0 100% 98%;\n\n  /* Used as the border around inputs. Dark mode: Should be a border that is light enough to have high contrast when rendered on a --card background. More contrast than standard --border */\n  --input: 210 8% 35%;\n  --ring: 213 94% 52%;\n  --chart-1: 213 94% 62%;\n  --chart-2: 195 88% 58%;\n  --chart-3: 165 82% 55%;\n  --chart-4: 285 78% 68%;\n  --chart-5: 340 75% 65%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(210 20% 0% / 0.20);\n  --shadow-xs: 0px 2px 0px 0px hsl(210 20% 0% / 0.25);\n  --shadow-sm: 0px 2px 0px 0px hsl(210 20% 0% / 0.30), 0px 1px 2px -1px hsl(210 20% 0% / 0.35);\n  --shadow: 0px 2px 0px 0px hsl(210 20% 0% / 0.35), 0px 1px 2px -1px hsl(210 20% 0% / 0.40);\n  --shadow-md: 0px 2px 0px 0px hsl(210 20% 0% / 0.40), 0px 2px 4px -1px hsl(210 20% 0% / 0.45);\n  --shadow-lg: 0px 2px 0px 0px hsl(210 20% 0% / 0.45), 0px 4px 6px -1px hsl(210 20% 0% / 0.50);\n  --shadow-xl: 0px 2px 0px 0px hsl(210 20% 0% / 0.50), 0px 8px 10px -1px hsl(210 20% 0% / 0.55);\n  --shadow-2xl: 0px 2px 0px 0px hsl(210 20% 0% / 0.60);\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: -1;\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: 999;\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}\n\n/* Custom background image support */\n.app-background {\n  position: relative;\n  min-height: 100vh;\n  width: 100%;\n}\n\n.app-background::before {\n  content: \"\";\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-image: url('/logo.png');\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  opacity: 0.15;\n  z-index: -1;\n  pointer-events: none;\n}","size_bytes":11664},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"shared/schema.ts":{"content":"import mongoose, { Schema, Document } from \"mongoose\";\nimport { z } from \"zod\";\n\nexport interface IUser extends Document {\n  _id: string;\n  username: string;\n  password: string;\n}\n\nconst userSchema = new Schema<IUser>({\n  username: { type: String, required: true, unique: true },\n  password: { type: String, required: true },\n});\n\nexport const UserModel = mongoose.models.User || mongoose.model<IUser>(\"User\", userSchema);\n\nexport const insertUserSchema = z.object({\n  username: z.string().min(1),\n  password: z.string().min(1),\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = {\n  id: any;\n  _id: string;\n  username: string;\n  password: string;\n};\n\nexport type Season = {\n  seasonNumber: number;\n  episodes: Episode[];\n};\n\nexport type Episode = {\n  episodeNumber: number;\n  link: string;\n};\n\nexport interface IContentItem extends Document {\n  _id: string;\n  title: string;\n  releaseYear: number;\n  category: string;\n  thumbnail: string;\n  driveLink?: string;\n  seasons?: Season[];\n  createdAt: Date;\n}\n\nconst seasonSchema = new Schema({\n  seasonNumber: { type: Number, required: true },\n  episodes: [{\n    episodeNumber: { type: Number, required: true },\n    link: { type: String, required: true },\n  }],\n}, { _id: false });\n\nconst contentItemSchema = new Schema<IContentItem>({\n  title: { type: String, required: true },\n  releaseYear: { type: Number, required: true },\n  category: { type: String, required: true },\n  thumbnail: { type: String, required: true },\n  driveLink: { type: String },\n  seasons: [seasonSchema],\n  createdAt: { type: Date, required: true, default: Date.now },\n});\n\nexport const ContentItemModel = mongoose.models.ContentItem || mongoose.model<IContentItem>(\"ContentItem\", contentItemSchema);\n\nexport const insertContentItemSchema = z.object({\n  title: z.string().min(1),\n  releaseYear: z.number().min(1900).max(2100),\n  category: z.string().min(1),\n  thumbnail: z.string().url(),\n  driveLink: z.string().url().optional(),\n  seasons: z.array(z.object({\n    seasonNumber: z.number(),\n    episodes: z.array(z.object({\n      episodeNumber: z.number(),\n      link: z.string().url(),\n    })),\n  })).optional(),\n});\n\nexport type InsertContentItem = z.infer<typeof insertContentItemSchema>;\nexport type ContentItem = {\n  _id: string;\n  title: string;\n  releaseYear: number;\n  category: string;\n  thumbnail: string;\n  driveLink?: string;\n  seasons?: Season[];\n  createdAt: Date;\n};\n\nexport interface IUploadLog extends Document {\n  _id: string;\n  contentTitle: string;\n  uploadedAt: Date;\n}\n\nconst uploadLogSchema = new Schema<IUploadLog>({\n  contentTitle: { type: String, required: true },\n  uploadedAt: { type: Date, required: true, default: Date.now },\n});\n\nexport const UploadLogModel = mongoose.models.UploadLog || mongoose.model<IUploadLog>(\"UploadLog\", uploadLogSchema);\n\nexport const insertUploadLogSchema = z.object({\n  contentTitle: z.string().min(1),\n});\n\nexport type InsertUploadLog = z.infer<typeof insertUploadLogSchema>;\nexport type UploadLog = {\n  _id: string;\n  contentTitle: string;\n  uploadedAt: Date;\n};\n","size_bytes":3076},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/examples/LoginPage.tsx":{"content":"import LoginPage from '../../pages/LoginPage';\nimport { Toaster } from '@/components/ui/toaster';\n\nexport default function LoginPageExample() {\n  return (\n    <>\n      <LoginPage />\n      <Toaster />\n    </>\n  );\n}\n","size_bytes":215},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"server/index.ts":{"content":"import express, { Request, Response, NextFunction } from \"express\";\nimport cors from \"cors\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport \"dotenv/config\";\n\nconst app = express();\n\n// Enable CORS for all routes\napp.use(cors({\n  origin: true, // Allow all origins in development, configure for production\n  credentials: true, // Allow cookies to be sent with requests\n  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n  allowedHeaders: ['Content-Type', 'Authorization']\n}));\n\ndeclare module \"http\" {\n  interface IncomingMessage {\n    rawBody: unknown;\n  }\n}\n\n// ✅ Parse JSON body safely\napp.use(\n  express.json({\n    verify: (req, _res, buf) => {\n      req.rawBody = buf;\n    },\n  })\n);\n\napp.use(express.urlencoded({ extended: false }));\n\n// ✅ Upload-only logging middleware\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: any;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (req.method === \"POST\" && path === \"/api/content\" && res.statusCode === 200) {\n      if (capturedJsonResponse && capturedJsonResponse.title) {\n        log(`✅ New upload: ${capturedJsonResponse.title}`);\n      }\n    }\n  });\n\n  next();\n});\n\n// ✅ Wrap async function cleanly (no IIFE confusion)\nasync function startServer() {\n  try {\n    const server = await registerRoutes(app);\n\n    // Error handler\n    app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n      const status = err.status || err.statusCode || 500;\n      const message = err.message || \"Internal Server Error\";\n      res.status(status).json({ message });\n      console.error(\"Server Error:\", err);\n    });\n\n    // ✅ Setup vite or static serve\n    if (app.get(\"env\") === \"development\") {\n      await setupVite(app, server);\n    } else {\n      serveStatic(app);\n    }\n\n    // ✅ Use correct host & port\n    const port = parseInt(process.env.PORT || \"5000\", 10);\n    const host = process.env.HOST || \"0.0.0.0\";\n\nserver.listen(port, host, () => {\n  log(`✅ Server running on http://${host}:${port}`);\n});\n\n  } catch (err) {\n    console.error(\"❌ Failed to start server:\", err);\n    process.exit(1);\n  }\n}\n\nstartServer();\n","size_bytes":2430},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/CategoryFilter.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { ComboBox } from \"@/components/ui/combobox\";\nimport { Search, Trash2, Edit } from \"lucide-react\";\n\ninterface CategoryFilterProps {\n  onCategoryChange: (category: string) => void;\n  onSearchClick: () => void;\n  onDeleteClick: () => void;\n  onEditClick: () => void;\n  selectedCategory: string;\n}\n\nconst categoryOptions = [\n  { value: \"All Type\", label: \"All Type\" },\n  { value: \"Movie\", label: \"Movie\" },\n  { value: \"Anime\", label: \"Anime\" },\n  { value: \"Web Series\", label: \"Web Series\" },\n];\n\nexport function CategoryFilter({ \n  onCategoryChange, \n  onSearchClick, \n  onDeleteClick, \n  onEditClick, \n  selectedCategory \n}: CategoryFilterProps) {\n  return (\n    <div className=\"flex flex-col sm:flex-row items-stretch sm:items-center gap-3 px-4 md:px-6 py-4 bg-card border-b border-border\">\n      <div className=\"flex-1 sm:max-w-xs\">\n        <ComboBox\n          options={categoryOptions}\n          value={selectedCategory}\n          onValueChange={onCategoryChange}\n          placeholder=\"Select Category\"\n          searchPlaceholder=\"Search category...\"\n          testId=\"select-category\"\n        />\n      </div>\n      <div className=\"flex gap-2 sm:gap-3\">\n        <Button onClick={onSearchClick} variant=\"outline\" className=\"flex-1 sm:flex-initial\" data-testid=\"button-search\">\n          <Search className=\"h-4 w-4 sm:mr-2\" />\n          <span className=\"hidden sm:inline\">Search</span>\n        </Button>\n        <Button onClick={onDeleteClick} variant=\"outline\" className=\"flex-1 sm:flex-initial\" data-testid=\"button-delete\">\n          <Trash2 className=\"h-4 w-4 sm:mr-2\" />\n          <span className=\"hidden sm:inline\">Delete</span>\n        </Button>\n        <Button onClick={onEditClick} variant=\"outline\" className=\"flex-1 sm:flex-initial\" data-testid=\"button-edit\">\n          <Edit className=\"h-4 w-4 sm:mr-2\" />\n          <span className=\"hidden sm:inline\">Edit</span>\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1981},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path, { resolve, dirname } from \"path\";\nimport { fileURLToPath } from \"url\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\n// ES module e __dirname fix\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": resolve(__dirname, \"client\", \"src\"),\n      \"@shared\": resolve(__dirname, \"shared\"),\n      \"@assets\": resolve(__dirname, \"attached_assets\"),\n    },\n  },\n  root: resolve(__dirname, \"client\"),\n  build: {\n    outDir: resolve(__dirname, \"dist\", \"public\"),\n    emptyOutDir: true,\n    rollupOptions: {\n      input: resolve(__dirname, \"client\", \"index.html\"),\n    },\n  },\n  css: {\n    postcss: resolve(__dirname, \"postcss.config.js\"),\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1340},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"README.md":{"content":"# MLWIO API\n\nA full-stack application for managing content with authentication, built with Express, React, and MongoDB Atlas.\n\n## Features\n\n- User authentication with session management\n- Content management (create, read, update, delete)\n- MongoDB Atlas database support\n- Persistent session storage using MongoDB\n- Secure password hashing with bcrypt\n\n## Setup Instructions\n\n### 1. Install Dependencies\n\n```bash\nnpm install\n```\n\n### 2. Configure Environment Variables\n\nCreate a `.env` file in the root directory with the following variables:\n\n```env\n# MongoDB Atlas Connection String (REQUIRED)\nMONGODB_URI=mongodb+srv://<username>:<password>@<cluster>.mongodb.net/?retryWrites=true&w=majority\n\n# Session Secret (change in production)\nSESSION_SECRET=your-secret-key-here\n\n# Node Environment\nNODE_ENV=development\n\n# Server Port\nPORT=5000\n```\n\n### 3. Get Your MongoDB Atlas Connection String\n\n1. Go to [MongoDB Atlas](https://cloud.mongodb.com/)\n2. Click on \"Connect\" for your cluster\n3. Choose \"Connect your application\"\n4. Copy the connection string\n5. Replace `<username>` and `<password>` with your database credentials\n6. Paste it into your `.env` file as `MONGODB_URI`\n\n### 4. Important: Whitelist Your IP Address\n\n**This is crucial to avoid connection errors!**\n\n1. In MongoDB Atlas, go to \"Network Access\" in the left sidebar\n2. Click \"Add IP Address\"\n3. Either:\n   - Click \"Add Current IP Address\" to whitelist your current IP\n   - Click \"Allow Access from Anywhere\" (0.0.0.0/0) for development\n\n### 5. Run the Application\n\n**Development mode:**\n```bash\nnpm run dev\n```\n\n**Production mode:**\n```bash\nnpm run build\nnpm start\n```\n\nThe application will run on `http://localhost:5000`\n\n## Default Credentials\n\n- Username: `********`\n- Password: `**********`\n\n## API Endpoints\n\n### Authentication\n- `POST /api/auth/login` - Login with username and password\n- `POST /api/auth/logout` - Logout current user\n- `GET /api/auth/me` - Get current user info\n\n### Content Management (requires authentication)\n- `GET /api/content` - Get all content\n- `GET /api/content/search?q=<query>&category=<category>` - Search content\n- `POST /api/content` - Create new content\n- `PUT /api/content/:id` - Update content by ID\n- `DELETE /api/content/:id` - Delete content by ID (requires password confirmation)\n\n## Troubleshooting\n\n### \"401 Unauthorized\" Error After Login\n\nThis has been fixed! The issue was that sessions weren't being stored persistently. The application now:\n\n1. ✅ Uses MongoDB to store sessions (not in-memory)\n2. ✅ Explicitly saves sessions before sending login response\n3. ✅ Automatically switches to MongoDB storage when `MONGODB_URI` is set\n\n**Make sure:**\n- Your `.env` file has the correct `MONGODB_URI`\n- Your MongoDB Atlas IP whitelist includes your IP address\n- You restart the server after changing `.env` variables\n\n### \"Failed to connect to MongoDB\" Error\n\n**Solutions:**\n1. Check that your MongoDB Atlas cluster is running\n2. Verify your IP address is whitelisted in MongoDB Atlas → Network Access\n3. Confirm your connection string credentials are correct\n4. Make sure the connection string is in the correct format\n\n### Sessions Not Persisting\n\nThe application now uses MongoDB to store sessions. If you still have issues:\n\n1. Check MongoDB Atlas connection is successful (check server logs)\n2. Verify the `sessions` collection is created in your `mlwio` database\n3. Clear your browser cookies and try again\n\n## Project Structure\n\n```\n├── client/              # React frontend\n│   └── src/\n│       ├── components/  # Reusable UI components\n│       ├── pages/       # Page components\n│       └── lib/         # Utilities and query client\n├── server/              # Express backend\n│   ├── index.ts         # Server entry point\n│   ├── routes.ts        # API routes and session config\n│   ├── storage.ts       # Database abstraction layer\n│   └── db.ts            # MongoDB connection\n├── shared/              # Shared types and schemas\n│   └── schema.ts        # Data models and validation\n└── .env                 # Environment variables (create this)\n```\n\n## Technologies Used\n\n- **Frontend:** React, Wouter, TanStack Query, Shadcn UI, Tailwind CSS\n- **Backend:** Express, MongoDB, Mongoose\n- **Authentication:** express-session with MongoDB session store\n- **Validation:** Zod\n- **Password Hashing:** bcrypt\n\n## License\n\nMIT\n# MLWIO_Admin1\n","size_bytes":4462},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/SearchDialog.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\n\ninterface SearchDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onSearch: (query: string, category: string) => void;\n}\n\nexport function SearchDialog({ open, onOpenChange, onSearch }: SearchDialogProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [searchCategory, setSearchCategory] = useState(\"Movie\");\n\n  const handleSearch = () => {\n    onSearch(searchQuery, searchCategory);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent data-testid=\"dialog-search\">\n        <DialogHeader>\n          <DialogTitle>Search Content</DialogTitle>\n        </DialogHeader>\n        <div className=\"space-y-4 pt-4\">\n          <div className=\"space-y-2\">\n            <Label>Category</Label>\n            <Select value={searchCategory} onValueChange={setSearchCategory}>\n              <SelectTrigger data-testid=\"select-search-category\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"Movie\">Movie</SelectItem>\n                <SelectItem value=\"Anime\">Anime</SelectItem>\n                <SelectItem value=\"Web Series\">Web Series</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          <div className=\"space-y-2\">\n            <Label>Title</Label>\n            <Input\n              placeholder=\"Type to search...\"\n              value={searchQuery}\n              onChange={(e) => {\n                setSearchQuery(e.target.value);\n                handleSearch();\n              }}\n              data-testid=\"input-search-query\"\n            />\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":2021},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/pages/UploadPage.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/Header\";\nimport { Footer } from \"@/components/Footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { ComboBox } from \"@/components/ui/combobox\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Plus, Trash2 } from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { InsertContentItem, Season } from \"@shared/schema\";\n\nconst categoryOptions = [\n  { value: \"Movie\", label: \"Movie\" },\n  { value: \"Anime\", label: \"Anime\" },\n  { value: \"Web Series\", label: \"Web Series\" },\n];\n\nconst seasonOptions = Array.from({ length: 10 }, (_, i) => ({\n  value: (i + 1).toString(),\n  label: `${i + 1} Season${i + 1 > 1 ? \"s\" : \"\"}`,\n}));\n\nexport default function UploadPage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [title, setTitle] = useState(\"\");\n  const [releaseYear, setReleaseYear] = useState(\"\");\n  const [category, setCategory] = useState(\"Movie\");\n  const [thumbnail, setThumbnail] = useState(\"\");\n  const [driveLink, setDriveLink] = useState(\"\");\n  const [numSeasons, setNumSeasons] = useState(1);\n  const [seasons, setSeasons] = useState<{ episodes: string[] }[]>([{ episodes: [\"\"] }]);\n\n  // ✅ Fixed upload mutation with Authorization header\n  const uploadMutation = useMutation({\n    mutationFn: async (data: InsertContentItem) => {\n      const token = localStorage.getItem(\"token\"); // Get token from localStorage\n\n      return await apiRequest(\"POST\", \"/api/content\", data, {\n        headers: {\n          Authorization: `Bearer ${token}`, // Add token in request header\n        },\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/content\"] });\n      toast({\n        title: \"Upload Successful\",\n        description: `${title} has been added to ${category}`,\n      });\n      setLocation(\"/dashboard\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Upload Failed\",\n        description: error.message || \"Failed to upload content\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCategoryChange = (newCategory: string) => {\n    setCategory(newCategory);\n    if (newCategory !== \"Movie\") {\n      setDriveLink(\"\");\n      setSeasons([{ episodes: [\"\"] }]);\n    }\n  };\n\n  const handleNumSeasonsChange = (num: number) => {\n    setNumSeasons(num);\n    const newSeasons = Array.from({ length: num }, (_, i) =>\n      seasons[i] || { episodes: [\"\"] }\n    );\n    setSeasons(newSeasons);\n  };\n\n  const addEpisode = (seasonIndex: number) => {\n    const newSeasons = [...seasons];\n    newSeasons[seasonIndex].episodes.push(\"\");\n    setSeasons(newSeasons);\n  };\n\n  const removeEpisode = (seasonIndex: number, episodeIndex: number) => {\n    const newSeasons = [...seasons];\n    newSeasons[seasonIndex].episodes.splice(episodeIndex, 1);\n    setSeasons(newSeasons);\n  };\n\n  const updateEpisode = (seasonIndex: number, episodeIndex: number, value: string) => {\n    const newSeasons = [...seasons];\n    newSeasons[seasonIndex].episodes[episodeIndex] = value;\n    setSeasons(newSeasons);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!releaseYear) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Release Year is required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const contentData: InsertContentItem = {\n      title,\n      releaseYear: parseInt(releaseYear),\n      category,\n      thumbnail,\n      driveLink: category === \"Movie\" ? driveLink : undefined,\n      seasons:\n        category !== \"Movie\"\n          ? (seasons.map((season, index) => ({\n              seasonNumber: index + 1,\n              episodes: season.episodes.map((link, episodeIndex) => ({\n                episodeNumber: episodeIndex + 1,\n                link,\n              })),\n            })) as Season[])\n          : undefined,\n    };\n\n    uploadMutation.mutate(contentData);\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header actionLabel=\"Home\" onActionClick={() => setLocation(\"/dashboard\")} />\n      <main className=\"flex-1 overflow-auto p-4 md:p-6\">\n        <Card className=\"max-w-4xl mx-auto\">\n          <CardHeader>\n            <CardTitle>Upload New Content</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"title\">Title</Label>\n                <Input\n                  id=\"title\"\n                  value={title}\n                  onChange={(e) => setTitle(e.target.value)}\n                  required\n                  data-testid=\"input-title\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"releaseYear\">Release Year</Label>\n                <Input\n                  id=\"releaseYear\"\n                  type=\"number\"\n                  value={releaseYear}\n                  onChange={(e) => setReleaseYear(e.target.value)}\n                  min=\"1900\"\n                  max=\"2100\"\n                  required\n                  data-testid=\"input-release-year\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"category\">Category</Label>\n                <ComboBox\n                  options={categoryOptions}\n                  value={category}\n                  onValueChange={handleCategoryChange}\n                  placeholder=\"Select Category\"\n                  searchPlaceholder=\"Search category...\"\n                  testId=\"select-upload-category\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"thumbnail\">Thumbnail URL</Label>\n                <Input\n                  id=\"thumbnail\"\n                  value={thumbnail}\n                  onChange={(e) => setThumbnail(e.target.value)}\n                  required\n                  data-testid=\"input-thumbnail\"\n                />\n              </div>\n\n              {category === \"Movie\" ? (\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"driveLink\">Video Link</Label>\n                  <Input\n                    id=\"driveLink\"\n                    value={driveLink}\n                    onChange={(e) => setDriveLink(e.target.value)}\n                    required\n                    data-testid=\"input-drive-link\"\n                  />\n                </div>\n              ) : (\n                <>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"numSeasons\">Number of Seasons</Label>\n                    <ComboBox\n                      options={seasonOptions}\n                      value={numSeasons.toString()}\n                      onValueChange={(val) => handleNumSeasonsChange(parseInt(val))}\n                      placeholder=\"Select number of seasons\"\n                      searchPlaceholder=\"Search seasons...\"\n                      testId=\"select-num-seasons\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-6\">\n                    {seasons.map((season, seasonIndex) => (\n                      <Card key={seasonIndex}>\n                        <CardHeader>\n                          <CardTitle className=\"text-lg\">\n                            Season {seasonIndex + 1}\n                          </CardTitle>\n                        </CardHeader>\n                        <CardContent className=\"space-y-3\">\n                          {season.episodes.map((episode, episodeIndex) => (\n                            <div key={episodeIndex} className=\"flex gap-2 items-center\">\n                              <Label className=\"w-16 text-sm\">\n                                E{(episodeIndex + 1).toString().padStart(2, \"0\")}\n                              </Label>\n                              <Input\n                                value={episode}\n                                onChange={(e) =>\n                                  updateEpisode(seasonIndex, episodeIndex, e.target.value)\n                                }\n                                required\n                                data-testid={`input-episode-${seasonIndex}-${episodeIndex}`}\n                              />\n                              {season.episodes.length > 1 && (\n                                <Button\n                                  type=\"button\"\n                                  variant=\"ghost\"\n                                  size=\"icon\"\n                                  onClick={() =>\n                                    removeEpisode(seasonIndex, episodeIndex)\n                                  }\n                                  data-testid={`button-remove-episode-${seasonIndex}-${episodeIndex}`}\n                                >\n                                  <Trash2 className=\"h-4 w-4\" />\n                                </Button>\n                              )}\n                            </div>\n                          ))}\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => addEpisode(seasonIndex)}\n                            className=\"w-full\"\n                            data-testid={`button-add-episode-${seasonIndex}`}\n                          >\n                            <Plus className=\"h-4 w-4 mr-2\" />\n                            Add Episode\n                          </Button>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                </>\n              )}\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={uploadMutation.isPending}\n                data-testid=\"button-submit-upload\"\n              >\n                {uploadMutation.isPending ? \"Uploading...\" : \"Upload Content\"}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":10438},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"server/storage.ts":{"content":"import { connectDB } from \"./db\";\nimport { UserModel, ContentItemModel, UploadLogModel, type User, type InsertUser, type ContentItem, type InsertContentItem, type UploadLog, type InsertUploadLog } from \"@shared/schema\";\nimport bcrypt from \"bcryptjs\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  verifyPassword(username: string, password: string): Promise<User | null>;\n  \n  // Content methods\n  createContent(content: InsertContentItem): Promise<ContentItem>;\n  getAllContent(): Promise<ContentItem[]>;\n  getContentByCategory(category: string): Promise<ContentItem[]>;\n  searchContent(query: string, category?: string): Promise<ContentItem[]>;\n  updateContent(id: string, content: InsertContentItem): Promise<ContentItem | undefined>;\n  deleteContent(id: string): Promise<boolean>;\n  getContentById(id: string): Promise<ContentItem | undefined>;\n  \n  // Upload log methods\n  createUploadLog(log: InsertUploadLog): Promise<UploadLog>;\n  getUploadLogs(): Promise<UploadLog[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User> = new Map();\n  private content: Map<string, ContentItem> = new Map();\n  private uploadLogs: Map<string, UploadLog> = new Map();\n  private nextUserId = 1;\n  private nextContentId = 1;\n  private nextLogId = 1;\n\n  constructor() {\n    const mlwioPassword = bcrypt.hashSync(\"MLWIO0372\", 10);\n    const mlwioUser: User = {\n      id: \"1\",\n      _id: \"1\",\n      username: \"mlwio\",\n      password: mlwioPassword,\n    };\n    this.users.set(\"1\", mlwioUser);\n    \n    this.nextUserId = 2;\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(u => u.username === username);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const hashedPassword = await bcrypt.hash(insertUser.password, 10);\n    const id = String(this.nextUserId++);\n    const user: User = {\n      id,\n      _id: id,\n      username: insertUser.username,\n      password: hashedPassword,\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async verifyPassword(username: string, password: string): Promise<User | null> {\n    const user = await this.getUserByUsername(username);\n    if (!user) return null;\n    \n    const isValid = await bcrypt.compare(password, user.password);\n    return isValid ? user : null;\n  }\n\n  async createContent(content: InsertContentItem): Promise<ContentItem> {\n    const id = String(this.nextContentId++);\n    const item: ContentItem = {\n      _id: id,\n      title: content.title,\n      category: content.category,\n      thumbnail: content.thumbnail,\n      releaseYear: content.releaseYear,\n      driveLink: content.driveLink,\n      seasons: content.seasons,\n      createdAt: new Date(),\n    };\n    this.content.set(id, item);\n    return item;\n  }\n\n  async getAllContent(): Promise<ContentItem[]> {\n    return Array.from(this.content.values()).sort((a, b) => \n      b.createdAt.getTime() - a.createdAt.getTime()\n    );\n  }\n\n  async getContentByCategory(category: string): Promise<ContentItem[]> {\n    return Array.from(this.content.values())\n      .filter(item => item.category === category)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async searchContent(query: string, category?: string): Promise<ContentItem[]> {\n    return Array.from(this.content.values())\n      .filter(item => {\n        const lowerQuery = query.toLowerCase();\n        const matchesTitle = item.title.toLowerCase().includes(lowerQuery);\n        const matchesYear = item.releaseYear ? item.releaseYear.toString().includes(query) : false;\n        const matchesQuery = matchesTitle || matchesYear;\n        const matchesCategory = !category || item.category === category;\n        return matchesQuery && matchesCategory;\n      })\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async getContentById(id: string): Promise<ContentItem | undefined> {\n    return this.content.get(id);\n  }\n\n  async updateContent(id: string, content: InsertContentItem): Promise<ContentItem | undefined> {\n    const existing = this.content.get(id);\n    if (!existing) return undefined;\n    \n    const updated: ContentItem = {\n      _id: id,\n      title: content.title,\n      category: content.category,\n      thumbnail: content.thumbnail,\n      releaseYear: content.releaseYear,\n      driveLink: content.driveLink,\n      seasons: content.seasons,\n      createdAt: existing.createdAt,\n    };\n    this.content.set(id, updated);\n    return updated;\n  }\n\n  async deleteContent(id: string): Promise<boolean> {\n    return this.content.delete(id);\n  }\n\n  async createUploadLog(log: InsertUploadLog): Promise<UploadLog> {\n    const id = String(this.nextLogId++);\n    const uploadLog: UploadLog = {\n      _id: id,\n      contentTitle: log.contentTitle,\n      uploadedAt: new Date(),\n    };\n    this.uploadLogs.set(id, uploadLog);\n    return uploadLog;\n  }\n\n  async getUploadLogs(): Promise<UploadLog[]> {\n    return Array.from(this.uploadLogs.values()).sort((a, b) => \n      b.uploadedAt.getTime() - a.uploadedAt.getTime()\n    );\n  }\n}\n\nexport class DbStorage implements IStorage {\n  constructor() {\n    // Ensure database connection is established\n    connectDB().catch(console.error);\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    const user = await UserModel.findById(id).lean() as any;\n    if (!user) return undefined;\n    return {\n  id: user._id.toString(),\n  _id: user._id.toString(),\n  username: user.username,\n  password: user.password,\n};\n\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const user = await UserModel.findOne({ username }).lean() as any;\n    if (!user) return undefined;\n    return {\n  id: user._id.toString(),\n  _id: user._id.toString(),\n  username: user.username,\n  password: user.password,\n};\n\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const hashedPassword = await bcrypt.hash(insertUser.password, 10);\n    const user = await UserModel.create({\n      username: insertUser.username,\n      password: hashedPassword,\n    });\n    return {\n  id: user._id.toString(),\n  _id: user._id.toString(),\n  username: user.username,\n  password: user.password,\n};\n\n  }\n\n  async verifyPassword(username: string, password: string): Promise<User | null> {\n    const user = await this.getUserByUsername(username);\n    if (!user) return null;\n    \n    const isValid = await bcrypt.compare(password, user.password);\n    return isValid ? user : null;\n  }\n\n  async createContent(content: InsertContentItem): Promise<ContentItem> {\n    const item = await ContentItemModel.create(content) as any;\n    return {\n      _id: item._id.toString(),\n      title: item.title,\n      category: item.category,\n      thumbnail: item.thumbnail,\n      releaseYear: item.releaseYear,\n      driveLink: item.driveLink,\n      seasons: item.seasons,\n      createdAt: item.createdAt,\n    };\n  }\n\n  async getAllContent(): Promise<ContentItem[]> {\n    const items = await ContentItemModel.find().sort({ createdAt: -1 }).lean() as any[];\n    return items.map(item => ({\n      _id: item._id.toString(),\n      title: item.title,\n      category: item.category,\n      thumbnail: item.thumbnail,\n      releaseYear: item.releaseYear,\n      driveLink: item.driveLink,\n      seasons: item.seasons,\n      createdAt: item.createdAt,\n    }));\n  }\n\n  async getContentByCategory(category: string): Promise<ContentItem[]> {\n    const items = await ContentItemModel.find({ category }).sort({ createdAt: -1 }).lean() as any[];\n    return items.map(item => ({\n      _id: item._id.toString(),\n      title: item.title,\n      category: item.category,\n      thumbnail: item.thumbnail,\n      releaseYear: item.releaseYear,\n      driveLink: item.driveLink,\n      seasons: item.seasons,\n      createdAt: item.createdAt,\n    }));\n  }\n\n  async searchContent(query: string, category?: string): Promise<ContentItem[]> {\n    const orConditions: any[] = [\n      { title: { $regex: query, $options: 'i' } }\n    ];\n    \n    // If query is a number, also search by release year\n    if (!isNaN(parseInt(query))) {\n      orConditions.push({ releaseYear: parseInt(query) });\n    }\n    \n    const filter: any = { $or: orConditions };\n    \n    if (category) {\n      filter.category = category;\n    }\n    \n    const items = await ContentItemModel.find(filter).sort({ createdAt: -1 }).lean() as any[];\n    return items.map(item => ({\n      _id: item._id.toString(),\n      title: item.title,\n      category: item.category,\n      thumbnail: item.thumbnail,\n      releaseYear: item.releaseYear,\n      driveLink: item.driveLink,\n      seasons: item.seasons,\n      createdAt: item.createdAt,\n    }));\n  }\n\n  async getContentById(id: string): Promise<ContentItem | undefined> {\n    const item = await ContentItemModel.findById(id).lean() as any;\n    if (!item) return undefined;\n    return {\n      _id: item._id.toString(),\n      title: item.title,\n      category: item.category,\n      thumbnail: item.thumbnail,\n      releaseYear: item.releaseYear,\n      driveLink: item.driveLink,\n      seasons: item.seasons,\n      createdAt: item.createdAt,\n    };\n  }\n\n  async updateContent(id: string, content: InsertContentItem): Promise<ContentItem | undefined> {\n    const item = await ContentItemModel.findByIdAndUpdate(id, content, { new: true }).lean() as any;\n    if (!item) return undefined;\n    return {\n      _id: item._id.toString(),\n      title: item.title,\n      category: item.category,\n      thumbnail: item.thumbnail,\n      releaseYear: item.releaseYear,\n      driveLink: item.driveLink,\n      seasons: item.seasons,\n      createdAt: item.createdAt,\n    };\n  }\n\n  async deleteContent(id: string): Promise<boolean> {\n    const result = await ContentItemModel.findByIdAndDelete(id);\n    return result !== null;\n  }\n\n  async createUploadLog(log: InsertUploadLog): Promise<UploadLog> {\n    const item = await UploadLogModel.create({\n      contentTitle: log.contentTitle,\n      uploadedAt: new Date(),\n    }) as any;\n    return {\n      _id: item._id.toString(),\n      contentTitle: item.contentTitle,\n      uploadedAt: item.uploadedAt,\n    };\n  }\n\n  async getUploadLogs(): Promise<UploadLog[]> {\n    const logs = await UploadLogModel.find().sort({ uploadedAt: -1 }).lean() as any[];\n    return logs.map(log => ({\n      _id: log._id.toString(),\n      contentTitle: log.contentTitle,\n      uploadedAt: log.uploadedAt,\n    }));\n  }\n}\n\n// Use DbStorage if MONGODB_URI is set, otherwise use MemStorage\nexport const storage = process.env.MONGODB_URI ? new DbStorage() : new MemStorage();\n","size_bytes":10792},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/examples/SearchDialog.tsx":{"content":"import { useState } from 'react';\nimport { SearchDialog } from '../SearchDialog';\nimport { Button } from '@/components/ui/button';\n\nexport default function SearchDialogExample() {\n  const [open, setOpen] = useState(false);\n  \n  return (\n    <div className=\"p-4\">\n      <Button onClick={() => setOpen(true)}>Open Search</Button>\n      <SearchDialog \n        open={open}\n        onOpenChange={setOpen}\n        onSearch={(query, category) => console.log('Search:', query, category)}\n      />\n    </div>\n  );\n}\n","size_bytes":507},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/examples/Footer.tsx":{"content":"import { Footer } from '../Footer';\n\nexport default function FooterExample() {\n  return <Footer />;\n}\n","size_bytes":102},"client/src/components/Footer.tsx":{"content":"export function Footer() {\n  return (\n    <footer className=\"border-t border-border bg-card py-4\">\n      <p className=\"text-center text-sm text-muted-foreground\" data-testid=\"text-footer\">\n        Provided by MLWIO\n      </p>\n    </footer>\n  );\n}\n","size_bytes":247},"client/src/pages/LoginPage.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport logoImage from \"@assets/mlwio-logo.png\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function LoginPage() {\n  const [, setLocation] = useLocation();\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    \n    try {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", { username, password });\n      \n      toast({\n        title: \"Login Successful\",\n        description: \"Welcome to MLWIO API Admin Panel\",\n      });\n      setLocation(\"/dashboard\");\n    } catch (error: any) {\n      toast({\n        title: \"Wrong password\",\n        description: error.message || \"Wrong password\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background relative overflow-hidden\">\n      <div \n        className=\"absolute inset-0 flex items-center justify-center opacity-30\"\n        style={{\n          backgroundImage: `url(${logoImage})`,\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n          backgroundRepeat: 'no-repeat',\n        }}\n      />\n      \n      <Card className=\"w-full max-w-md mx-4 relative z-10\">\n        <CardHeader>\n          <CardTitle className=\"text-2xl text-center\">MLWIO API</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleLogin} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\">Username</Label>\n              <Input\n                id=\"username\"\n                type=\"text\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                placeholder=\"Enter username\"\n                autoComplete=\"username\"\n                disabled={isLoading}\n                data-testid=\"input-username\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                placeholder=\"Enter password\"\n                autoComplete=\"current-password\"\n                disabled={isLoading}\n                data-testid=\"input-password\"\n              />\n            </div>\n            <Button type=\"submit\" className=\"w-full\" disabled={isLoading} data-testid=\"button-login\">\n              {isLoading ? \"Logging in...\" : \"Login\"}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":3185},"design_guidelines.md":{"content":"# MLWIO API Admin Panel - Design Guidelines\n\n## Design Approach\n**Reference-Based Approach**: This project must replicate the Blakite API admin interface (https://blakiteapi.xyz/admin/links) exactly - matching theme, color palette, layout, spacing, typography, and interaction patterns A-to-Z.\n\n## Visual Theme & Aesthetics\n- Dark theme matching Blakite's exact color scheme and background treatment\n- Professional admin interface aesthetic with clean, modern styling\n- Consistent visual language across login, dashboard, and upload pages\n- Subtle shadows and depth to create visual hierarchy\n\n## Typography Hierarchy\n- Match Blakite's exact font families, sizes, and weights\n- Header text: \"MLWIO API\" (left-aligned in top bar)\n- Footer text: \"Provided by MLWIO\" (center-aligned)\n- Clear labeling for table columns: Thumbnail, Title, Category\n- Episode labeling: Auto-numbered format (E01, E02, etc.)\n- Season labeling: S1, S2, etc. matching Blakite's format\n\n## Layout System\n**Spacing**: Match Blakite's exact spacing units for margins, padding, and gaps between elements\n- Add visible gaps between dashboard rows/items\n- Consistent spacing in header, content area, and footer\n- Proper breathing room around form fields and buttons\n\n**Structure**:\n- Fixed header at top with left/right alignment (brand left, action button right)\n- Category selector + search section below header\n- Main content area for dashboard grid/table\n- Fixed footer at bottom\n\n## Component Library\n\n### Login Page\n- Full-page background with faded logo watermark\n- Centered login box with Blakite-style card treatment\n- Username and password fields\n- Submit button matching theme\n\n### Header Bar\n- Left: \"MLWIO API\" branding text\n- Right: Single action button (Upload on dashboard, Home on upload page)\n- Same visual treatment as Blakite's header\n\n### Category & Search Section\n- Category dropdown selector (Movie / Anime / Web Series)\n- Large search button\n- Positioned below header, above main content\n- Search popup/inline area with category filter and live text search\n\n### Dashboard Cards/Table\n- Table-style layout with columns: No., Thumbnail, Title, Seasons, Episodes, Category\n- Rounded corners on all 4 sides of each row/card\n- Thumbnail images displayed in first column\n- Drive link or \"View\" buttons for movies\n- Expandable rows for Anime/Web Series showing season and episode structure\n\n**Hover Effects**:\n- Slight upward lift (3D elevation)\n- Color transition\n- Soft shadow animation\n- Smooth, subtle transitions\n\n**Anime/Series Expansion**:\n- Copy Blakite's exact expand/collapse behavior\n- Season list display matching Blakite's structure\n- Episode links under each season with automatic numbering\n- Same visual presentation and spacing as Blakite\n\n### Upload Page\n- Form layout with clear field labels\n- Text input for Name\n- Dropdown for Category selection\n- Conditional fields based on category:\n  - Movie: Single Drive Link input\n  - Anime/Web Series: Season selector (1-10), dynamic episode input fields per season\n- Thumbnail Link input\n- Submit button\n- Home button in header replaces Upload button\n\n### Footer\n- Fixed to bottom of viewport\n- Center-aligned text: \"Provided by MLWIO\"\n- Matches Blakite's footer styling\n\n## Interactive Elements\n\n### Buttons\n- Primary action buttons (Upload, Search, Submit)\n- Match Blakite's button styling exactly\n- Smooth hover states with color transitions\n- Clear visual feedback on interaction\n\n### Dropdowns\n- Category selectors (Movie/Anime/Web Series)\n- Season number selector (1-10)\n- Styled to match Blakite's form elements\n\n### Expandable Sections\n- Anime/Series items expand on click\n- Smooth expand/collapse animations\n- Season and episode structure revealed on expansion\n- Replicate Blakite's exact implementation\n\n## Responsive Design\n- Maintain Blakite's responsive behavior\n- Mobile-friendly layout adaptations\n- Touch-friendly interaction areas\n- Consistent visual treatment across breakpoints\n\n## Animation Guidelines\n- Hover animations: subtle 3D lift with shadow\n- Expand/collapse: smooth transitions\n- Color transitions: soft, professional\n- Loading states: minimal, non-intrusive\n- Match Blakite's animation timing and easing\n\n## Images\n- Logo: Faded background watermark on login page\n- Thumbnails: Displayed in dashboard table for each item\n- No hero images required (admin interface)\n\n## Key Design Principles\n1. **Exact Replication**: Match Blakite's design in all visual and interaction details\n2. **Professional Aesthetics**: Clean, modern admin interface\n3. **Visual Feedback**: Clear hover states and interactive elements\n4. **Organized Hierarchy**: Logical information architecture\n5. **Consistent Theme**: MLWIO branding maintained across all pages","size_bytes":4714},"client/src/components/ContentList.tsx":{"content":"import { ContentItem } from \"./ContentItem\";\nimport type { ContentItem as ContentItemType } from \"@shared/schema\";\n\ninterface ContentListProps {\n  items: ContentItemType[];\n  category: string;\n}\n\nexport function ContentList({ items, category }: ContentListProps) {\n  const filteredItems = category === \"All Type\" \n    ? items \n    : items.filter(item => item.category === category);\n\n  if (filteredItems.length === 0) {\n    return (\n      <div className=\"flex items-center justify-center py-16\">\n        <p className=\"text-muted-foreground\" data-testid=\"text-no-content\">\n          No content found in this category\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"px-4 md:px-6 py-6\">\n      <div className=\"mb-4 hidden md:flex items-center gap-4 px-4 text-sm font-medium text-muted-foreground\">\n        <div className=\"w-24\">Thumbnail</div>\n        <div className=\"flex-1 min-w-[200px]\">Title</div>\n        <div className=\"w-24\">Release Year</div>\n        <div className=\"w-32\">Category</div>\n        <div className=\"w-24\"></div>\n      </div>\n      <div className=\"space-y-3\">\n        {filteredItems.map((item, index) => (\n          <ContentItem key={item._id} item={item} index={index} />\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":1253},"client/src/components/examples/Header.tsx":{"content":"import { Header } from '../Header';\n\nexport default function HeaderExample() {\n  return (\n    <Header \n      actionLabel=\"Upload\" \n      onActionClick={() => console.log('Action clicked')} \n    />\n  );\n}\n","size_bytes":204},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/pages/DashboardPage.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/Header\";\nimport { Footer } from \"@/components/Footer\";\nimport { CategoryFilter } from \"@/components/CategoryFilter\";\nimport { ContentList } from \"@/components/ContentList\";\nimport { SearchDialog } from \"@/components/SearchDialog\";\nimport { DeleteDialog } from \"@/components/DeleteDialog\";\nimport { EditDialog } from \"@/components/EditDialog\";\nimport type { ContentItem } from \"@shared/schema\";\n\nexport default function DashboardPage() {\n  const [, setLocation] = useLocation();\n  const [selectedCategory, setSelectedCategory] = useState(\"All Type\");\n  const [searchOpen, setSearchOpen] = useState(false);\n  const [deleteOpen, setDeleteOpen] = useState(false);\n  const [editOpen, setEditOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [searchCategory, setSearchCategory] = useState(\"Movie\");\n\n  const { data: allContent = [], isLoading } = useQuery<ContentItem[]>({\n    queryKey: [\"/api/content\"],\n  });\n\n  const filteredItems = allContent.filter(item => {\n    const matchesCategory = selectedCategory === \"All Type\" || selectedCategory === item.category;\n    const matchesSearch = searchQuery === \"\" || \n      item.title.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesSearchCategory = searchQuery === \"\" || searchCategory === item.category;\n    \n    return matchesCategory && (!searchQuery || (matchesSearch && matchesSearchCategory));\n  });\n\n  const handleSearch = (query: string, category: string) => {\n    setSearchQuery(query);\n    setSearchCategory(category);\n    if (query) {\n      setSelectedCategory(category);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header \n        actionLabel=\"Upload\" \n        onActionClick={() => setLocation(\"/upload\")} \n      />\n      <CategoryFilter \n        selectedCategory={selectedCategory}\n        onCategoryChange={setSelectedCategory}\n        onSearchClick={() => setSearchOpen(true)}\n        onDeleteClick={() => setDeleteOpen(true)}\n        onEditClick={() => setEditOpen(true)}\n      />\n      <main className=\"flex-1 overflow-auto\">\n        {isLoading ? (\n          <div className=\"flex items-center justify-center py-16\">\n            <p className=\"text-muted-foreground\">Loading content...</p>\n          </div>\n        ) : (\n          <ContentList items={filteredItems} category={selectedCategory} />\n        )}\n      </main>\n      <Footer />\n      <SearchDialog \n        open={searchOpen}\n        onOpenChange={setSearchOpen}\n        onSearch={handleSearch}\n      />\n      <DeleteDialog\n        open={deleteOpen}\n        onOpenChange={setDeleteOpen}\n        items={allContent}\n      />\n      <EditDialog\n        open={editOpen}\n        onOpenChange={setEditOpen}\n        items={allContent}\n      />\n    </div>\n  );\n}\n","size_bytes":2919},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"server/db.ts":{"content":"import 'dotenv/config';\nimport mongoose from \"mongoose\";\n\nconst MONGODB_URI = process.env.MONGODB_URI;\n\nlet isConnected = false;\n\nexport async function connectDB() {\n  if (isConnected) return;\n\n  if (!MONGODB_URI) {\n    console.log(\"⚠️  MONGODB_URI not set. Using in-memory storage.\");\n    return;\n  }\n\n  try {\n    await mongoose.connect(MONGODB_URI, {\n      serverSelectionTimeoutMS: 5000,\n      socketTimeoutMS: 45000,\n    });\n    isConnected = true;\n    console.log(\"✓ Connected to MongoDB Atlas\");\n  } catch (error) {\n    console.error(\"❌ Failed to connect to MongoDB:\", error);\n    throw error;\n  }\n}\n\nexport const db = mongoose.connection;\n","size_bytes":654},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"replit.md":{"content":"# MLWIO API Admin Panel\n\n## Overview\nMLWIO API is an admin panel for managing multimedia content (Movies, Anime, Web Series). It provides a centralized interface for uploading, categorizing, and organizing content with episode/season management. The application's design mirrors the Blakite API admin interface, featuring a dark theme and a professional aesthetic. The project aims to streamline content management for multimedia platforms, offering a robust and intuitive dashboard.\n\n## User Preferences\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework:** React with TypeScript.\n- **Build System:** Vite.\n- **Routing:** Wouter.\n- **UI:** shadcn/ui (Radix UI, Tailwind CSS, CVA), primary dark theme.\n- **State Management:** TanStack Query for server state, React hooks for local UI state.\n- **Form Handling:** React Hook Form with Zod for type-safe validation.\n\n### Backend Architecture\n- **Server Framework:** Express.js with TypeScript.\n- **API Design:** RESTful endpoints under `/api` for authentication, content management (CRUD).\n  - Public read access for content listing and details (`GET /api/content`, `GET /api/content/:id`, `GET /api/content/search`).\n  - Authenticated write access for content creation, updates, and deletion (`POST`, `PUT`, `DELETE /api/content`).\n- **Authentication:** Session-based authentication using `express-session` with HTTP-only cookies.\n- **Security:** bcryptjs for password hashing, CSRF protection, secure cookie configuration for production.\n- **Request Handling:** JSON bodies, centralized error handling, request logging.\n- **CORS:** Configured to allow cross-origin requests, supporting credentials.\n\n### Database Architecture\n- **ORM:** Mongoose ORM for MongoDB.\n- **Database:** MongoDB Atlas (cloud-hosted), with in-memory fallback.\n- **Data Models:** Users (admin authentication), Content Items (multimedia content with categories, drive links, seasons/episodes), and Sessions.\n- **Schema:** Schema-first approach with TypeScript type inference, Zod schemas for validation.\n- **Content Ordering:** All content retrieval is sorted by `createdAt` in descending order (newest first).\n- **Upload Logging:** Separate `UploadLog` model to track content uploads.\n\n### File Structure & Organization\n- **Monorepo:** `/client` (React frontend), `/server` (Express backend), `/shared` (shared types/schemas).\n- **Path Aliases:** `@/` for client source, `@shared/` for shared, `@assets/` for attached assets.\n\n### Content Management Features\n- **Category System:** Supports Movie, Anime, Web Series with category-specific data structures.\n- **Release Year Field:** REQUIRED field for all content items (1900-2100 validation range).\n- **Episode/Season Management:** Auto-numbered episodes (E01, E02), season labeling (S1, S2), individual episode links.\n- **Search & Filtering:** Enhanced case-insensitive partial search supporting both title and release year queries, category-based filtering.\n- **YouTube-like Layout:** Responsive grid display with thumbnails on top, metadata below (title, year, category).\n- **Inline Video Player:** Click-to-play functionality with embedded video player in modal, no external tabs.\n\n## External Dependencies\n\n### Database & Storage\n- **MongoDB Atlas:** Cloud-hosted NoSQL database.\n- **Mongoose:** MongoDB object data modeling.\n- **connect-mongo:** MongoDB session store for `express-session`.\n\n### UI Component Primitives\n- **Radix UI:** Headless accessible component primitives.\n- **Lucide React:** Icon library.\n\n### Development & Build Tools\n- **TypeScript:** Language for type safety.\n- **Vite:** Frontend build tool.\n\n### Utility Libraries\n- **TanStack Query (React Query):** Server state management.\n- **React Hook Form:** Form management with Zod resolvers.\n- **Tailwind CSS:** Utility-first CSS framework.\n- **bcryptjs:** Password hashing.\n- **clsx & tailwind-merge:** Conditional class name composition.\n- **nanoid:** Unique ID generation.\n- **date-fns:** Date manipulation.\n- **cors:** Middleware for enabling Cross-Origin Resource Sharing.\n\n### Deployment Configuration\n- Environment variables for `MONGODB_URI`, `SESSION_SECRET`, `NODE_ENV`, `PORT`.\n- Server binds to `0.0.0.0` for external accessibility.\n\n## Recent Updates (October 29, 2025)\n\n### YouTube-like CMS Layout & Inline Video Player (Latest)\n\n**Purpose:** Completely redesigned the dashboard and content display to match YouTube's user experience with grid layout, inline video playback, and improved mobile app integration.\n\n**Major Changes:**\n\n1. **Schema Updates - Release Year NOW REQUIRED**\n   - Changed `releaseYear` from optional to REQUIRED field with validation (1900-2100 range)\n   - Updated field ordering: title → releaseYear → category → thumbnail → driveLink\n   - Added URL validation for thumbnail and driveLink fields\n   - All existing content must have a release year to be valid\n\n2. **Upload Form Redesign**\n   - **Field Order:** Title → Release Year → Category → Thumbnail URL → Video Link (exactly as specified)\n   - **All Fields Required:** Release Year is now mandatory, not optional\n   - **Removed All Placeholder Text:** Input fields no longer show \"(e.g., ...)\" placeholders\n   - Changed \"Drive Link\" label to \"Video Link\" for clarity\n   - Added proper validation to prevent empty submissions\n\n3. **YouTube-like Dashboard Grid Layout**\n   - Replaced horizontal list with responsive grid (2-6 columns based on screen size)\n   - **Layout Order:** Thumbnail (top) → Title → Release Year → Category (below)\n   - Thumbnail on top with aspect-video ratio and hover effects\n   - Hover animations: scale, shadow elevation, play icon overlay\n   - Title with 2-line clamp to prevent overflow\n   - Loading spinner during API fetch\n\n4. **Inline Video Player (Movies)**\n   - Created `VideoPlayerDialog` component for movie playback\n   - Clicking a movie card fetches `/api/content/:id` from API\n   - Video plays inline in modal, NOT in external tabs\n   - Auto-converts Google Drive links to embed format\n   - Full-screen support with iframe embed\n\n5. **Inline Series Player (Anime/Web Series)**\n   - Created `SeriesPlayerDialog` component for series playback\n   - Fetches full content data from API on card click\n   - Episode selector grid (4-8 columns responsive)\n   - Click episode to play inline in modal\n   - Back button to return to episode selector\n   - Season organization maintained\n\n6. **API Integration on Click**\n   - Cards now fetch `/api/content/:id` when clicked using `refetch()`\n   - Loading state displayed while fetching content details\n   - No more relying on preloaded data from list endpoint\n   - Proper error handling for failed fetches\n   - YouTube-like behavior: click → fetch → play immediately\n\n7. **Login Form Enhancement**\n   - Added `autoComplete=\"username\"` and `autoComplete=\"current-password\"` attributes\n   - Fixes browser console warnings about autocomplete\n   - Improves password manager integration\n\n**Technical Implementation:**\n\n- `ContentItem.tsx`: Uses TanStack Query with manual `refetch()` to fetch on click\n- `VideoPlayerDialog.tsx`: Embeds video player with Google Drive preview URLs\n- `SeriesPlayerDialog.tsx`: Episode selector with inline playback\n- `ContentList.tsx`: Responsive CSS Grid for YouTube-like layout\n- Query disabled by default, enabled only on user click\n\n**Mobile App Benefits:**\n\n- GET `/api/content` returns thumbnail, title, year, category for list display\n- GET `/api/content/:id` returns full details with video links when user clicks\n- Proper JSON structure for easy parsing in mobile apps\n- No more empty data or errors - all endpoints tested and verified\n- Search by title or year works with URL encoding\n\n**Files Modified:**\n- `shared/schema.ts` - Required releaseYear, field ordering, URL validation\n- `client/src/pages/UploadPage.tsx` - Field reordering, removed placeholders, required validation\n- `client/src/components/ContentList.tsx` - Grid layout implementation\n- `client/src/components/ContentItem.tsx` - Click handler with API fetch\n- `client/src/components/VideoPlayerDialog.tsx` - NEW: Movie player\n- `client/src/components/SeriesPlayerDialog.tsx` - NEW: Series player\n- `client/src/pages/LoginPage.tsx` - Autocomplete attributes\n\n**User Experience:**\n- Opening the app shows grid of thumbnails (like YouTube)\n- Below each thumbnail: Title, Release Year, Category\n- Clicking a thumbnail fetches video link from API and plays immediately\n- No external tabs - everything plays in-app\n- Smooth, professional YouTube-like experience\n\n---\n\n### Release Year Feature & Enhanced Search\n\n**Purpose:** Added release year field to content management and improved API search functionality to support searching by both title and year with proper URL encoding support.\n\n**Changes Implemented:**\n\n1. **Schema Updates**\n   - Added optional `releaseYear` number field to content schema in `shared/schema.ts`\n   - Updated IContentItem interface, ContentItem type, MongoDB schema, and Zod validation\n   - Field is backward compatible (optional) - existing content without year works fine\n\n2. **Storage Layer Enhancement**\n   - Updated DbStorage and MemStorage to include releaseYear in all CRUD operations\n   - Enhanced searchContent method to query both title (regex, case-insensitive) and release year (exact match)\n   - MongoDB search uses $or query to match either title OR year\n   - Memory storage searches both title and year with partial matching\n\n3. **Upload Form Updates**\n   - Added \"Release Year\" input field (optional number, 1900-2100 range)\n   - Field appears between Title and Category in upload form\n   - Proper form validation and data submission handling\n\n4. **Dashboard Layout Improvements**\n   - **Reorganized column order:** Category now appears on the LEFT (was on right)\n   - **Release year display:** Year shown in parentheses next to title (e.g., \"Iron Man 1 (2008)\")\n   - Updated ContentList and ContentItem components for new layout\n   - Desktop view: Category | No. | Thumbnail | Title (Year) | Actions\n\n5. **API Search Fixes**\n   - **Route Order Fix:** Moved `/api/content/search` route BEFORE `/api/content/:id` to prevent routing conflicts\n   - **Enhanced Search Logic:**\n     - Case-insensitive partial matching on title (already worked)\n     - Exact matching on release year when query is numeric\n     - Supports URL-encoded spaces and special characters\n     - Returns empty array instead of errors when no matches found\n\n**API Examples:**\n\n```bash\n# Search by title (partial, case-insensitive)\nGET /api/content/search?q=iron&category=Movie\n# Returns: [{ title: \"IRON MAN 1\", ... }]\n\n# Search by year (finds items with year in title or releaseYear field)\nGET /api/content/search?q=2008&category=Movie\n# Returns items with 2008 in title or releaseYear: 2008\n\n# Search with URL-encoded spaces\nGET /api/content/search?q=spider%20man\n# Returns: [{ title: \"Spider Man 1 2002\", ... }, { title: \"Spider Man 2 2004\", ... }]\n\n# Get all content (includes releaseYear field)\nGET /api/content\n# Returns: [{ _id, title, category, thumbnail, releaseYear, driveLink, ... }]\n```\n\n**Response Format with Release Year:**\n```json\n{\n  \"_id\": \"6901cab7779da171365afe09\",\n  \"title\": \"IRON MAN 1\",\n  \"category\": \"Movie\",\n  \"thumbnail\": \"https://...\",\n  \"releaseYear\": 2008,\n  \"driveLink\": \"https://drive.google.com/...\",\n  \"seasons\": [],\n  \"createdAt\": \"2025-10-29T08:05:11.868Z\"\n}\n```\n\n**Files Modified:**\n- `shared/schema.ts` - Added releaseYear field to schema, interfaces, and validation\n- `server/storage.ts` - Updated all CRUD operations and enhanced search logic for both storage types\n- `server/routes.ts` - Fixed route order (search before :id)\n- `client/src/pages/UploadPage.tsx` - Added release year input field\n- `client/src/components/ContentList.tsx` - Reorganized column headers\n- `client/src/components/ContentItem.tsx` - Updated layout (category left, year next to title)\n\n**Backward Compatibility:**\n- Release year is optional - existing content without years continues to work\n- Database queries handle missing releaseYear fields gracefully\n- No migration required for existing data\n\n**Mobile App Integration Notes:**\n- All endpoints support CORS and proper URL encoding\n- Search queries like `\"iron man 1 2008\"` or `\"Iron Man 1\"` both work\n- Empty search results return `[]` instead of error messages\n- Thumbnails, titles, and video links load correctly in external apps","size_bytes":12424},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/examples/DashboardPage.tsx":{"content":"import DashboardPage from '../../pages/DashboardPage';\n\nexport default function DashboardPageExample() {\n  return <DashboardPage />;\n}\n","size_bytes":135},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\nmethod: string, url: string, data?: unknown | undefined, p0?: { headers: { Authorization: string; }; },\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1424},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport LoginPage from \"@/pages/LoginPage\";\nimport DashboardPage from \"@/pages/DashboardPage\";\nimport UploadPage from \"@/pages/UploadPage\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={LoginPage} />\n      <Route path=\"/dashboard\" component={DashboardPage} />\n      <Route path=\"/upload\" component={UploadPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"app-background\">\n          <Toaster />\n          <Router />\n        </div>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":984},"client/src/components/ContentItem.tsx":{"content":"import { useState } from \"react\";\nimport { ChevronDown, ChevronRight, ExternalLink } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport type { ContentItem as ContentItemType } from \"@shared/schema\";\n\ninterface ContentItemProps {\n  item: ContentItemType;\n  index: number;\n}\n\nexport function ContentItem({ item, index }: ContentItemProps) {\n  const [expanded, setExpanded] = useState(false);\n\n  const isExpandable = item.category === \"Anime\" || item.category === \"Web Series\";\n\n  return (\n    <div \n      className=\"border border-card-border bg-card rounded-md hover-elevate active-elevate-2 transition-all duration-200 hover:shadow-lg\"\n      data-testid={`card-content-${item._id}`}\n    >\n      <div \n        className={`flex flex-col md:flex-row items-start md:items-center gap-3 md:gap-4 p-4 ${isExpandable ? 'cursor-pointer' : ''}`}\n        onClick={() => isExpandable && setExpanded(!expanded)}\n      >\n        <div className=\"w-20 h-16 md:w-24 md:h-16 bg-muted rounded-md overflow-hidden flex-shrink-0\">\n          {item.thumbnail ? (\n            <img \n              src={item.thumbnail} \n              alt={item.title}\n              className=\"w-full h-full object-cover\"\n              data-testid={`img-thumbnail-${item._id}`}\n            />\n          ) : (\n            <div className=\"w-full h-full flex items-center justify-center text-xs text-muted-foreground\">\n              No Image\n            </div>\n          )}\n        </div>\n\n        <div className=\"flex-1 min-w-0 md:min-w-[200px]\">\n          <h3 className=\"font-medium text-foreground truncate\" data-testid={`text-title-${item._id}`}>\n            {item.title}\n          </h3>\n        </div>\n\n        <div className=\"w-full md:w-24 text-muted-foreground text-sm\" data-testid={`text-year-${item._id}`}>\n          {item.releaseYear || 'N/A'}\n        </div>\n\n        <div className=\"w-full md:w-32 text-muted-foreground text-sm\" data-testid={`text-category-${item._id}`}>\n          {item.category}\n        </div>\n\n        <div className=\"flex items-center gap-2 w-full md:w-24\">\n          {item.category === \"Movie\" && item.driveLink && (\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={(e) => {\n                e.stopPropagation();\n                window.open(item.driveLink!, '_blank');\n              }}\n              className=\"flex-1 md:flex-initial\"\n              data-testid={`button-watch-${item._id}`}\n            >\n              <ExternalLink className=\"mr-2 h-4 w-4\" />\n              Watch\n            </Button>\n          )}\n          {isExpandable && (\n            <div className=\"w-8 flex items-center justify-center ml-auto md:ml-0\">\n              {expanded ? (\n                <ChevronDown className=\"h-5 w-5 text-muted-foreground\" />\n              ) : (\n                <ChevronRight className=\"h-5 w-5 text-muted-foreground\" />\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n\n      {isExpandable && expanded && item.seasons && (\n        <div className=\"px-4 pb-4 pt-2 border-t border-card-border\">\n          <div className=\"space-y-4\">\n            {item.seasons.map((season) => (\n              <div key={season.seasonNumber} className=\"space-y-2\">\n                <h4 className=\"font-medium text-sm text-foreground\">\n                  Season {season.seasonNumber}\n                </h4>\n                <div className=\"grid grid-cols-3 sm:grid-cols-4 md:grid-cols-6 gap-2\">\n                  {season.episodes.map((episode) => (\n                    <Button\n                      key={episode.episodeNumber}\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => window.open(episode.link, '_blank')}\n                      className=\"text-xs\"\n                      data-testid={`button-episode-${item._id}-${season.seasonNumber}-${episode.episodeNumber}`}\n                    >\n                      E{episode.episodeNumber.toString().padStart(2, '0')}\n                    </Button>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":4162},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/examples/CategoryFilter.tsx":{"content":"import { useState } from 'react';\nimport { CategoryFilter } from '../CategoryFilter';\n\nexport default function CategoryFilterExample() {\n  const [category, setCategory] = useState('Movie');\n  \n  return (\n    <CategoryFilter \n      selectedCategory={category}\n      onCategoryChange={setCategory}\n      onSearchClick={() => console.log('Search clicked')}\n    />\n  );\n}\n","size_bytes":368},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/examples/ContentItem.tsx":{"content":"import { ContentItem } from '../ContentItem';\n\nexport default function ContentItemExample() {\n  const mockMovie = {\n    id: '1',\n    title: '365 Days to the Wedding',\n    category: 'Movie',\n    thumbnail: 'https://placehold.co/200x300/1e293b/94a3b8?text=Movie',\n    driveLink: 'https://example.com',\n    seasons: null,\n  };\n\n  const mockAnime = {\n    id: '2',\n    title: 'Attack on Titan',\n    category: 'Anime',\n    thumbnail: 'https://placehold.co/200x300/1e293b/94a3b8?text=Anime',\n    driveLink: null,\n    seasons: [\n      {\n        seasonNumber: 1,\n        episodes: [\n          { episodeNumber: 1, link: 'https://example.com/s1e1' },\n          { episodeNumber: 2, link: 'https://example.com/s1e2' },\n          { episodeNumber: 3, link: 'https://example.com/s1e3' },\n          { episodeNumber: 4, link: 'https://example.com/s1e4' },\n          { episodeNumber: 5, link: 'https://example.com/s1e5' },\n        ],\n      },\n      {\n        seasonNumber: 2,\n        episodes: [\n          { episodeNumber: 1, link: 'https://example.com/s2e1' },\n          { episodeNumber: 2, link: 'https://example.com/s2e2' },\n          { episodeNumber: 3, link: 'https://example.com/s2e3' },\n        ],\n      },\n    ],\n  };\n\n  return (\n    <div className=\"space-y-4 p-4\">\n      <ContentItem item={mockMovie} index={0} />\n      <ContentItem item={mockAnime} index={1} />\n    </div>\n  );\n}\n","size_bytes":1371},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/DeleteDialog.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { ComboBox } from \"@/components/ui/combobox\";\nimport type { ContentItem } from \"@shared/schema\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { AlertCircle } from \"lucide-react\";\n\ninterface DeleteDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  items: ContentItem[];\n}\n\nexport function DeleteDialog({ open, onOpenChange, items }: DeleteDialogProps) {\n  const [selectedItemId, setSelectedItemId] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [step, setStep] = useState<\"select\" | \"confirm\">(\"select\");\n  \n  const queryClient = useQueryClient();\n  \n  const itemOptions = items.map((item) => ({\n    value: item._id,\n    label: `${item.title} (${item.category})`,\n  }));\n\n  const deleteMutation = useMutation({\n    mutationFn: async (data: { id: string; username: string; password: string }) => {\n      const response = await fetch(`/api/content/${data.id}`, {\n        method: \"DELETE\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ username: data.username, password: data.password }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || \"Failed to delete content\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/content\"] });\n      handleClose();\n    },\n    onError: (error: Error) => {\n      setError(error.message);\n    },\n  });\n\n  const handleClose = () => {\n    setSelectedItemId(\"\");\n    setUsername(\"\");\n    setPassword(\"\");\n    setError(\"\");\n    setStep(\"select\");\n    onOpenChange(false);\n  };\n\n  const handleNext = () => {\n    if (!selectedItemId) {\n      setError(\"Please select an item to delete\");\n      return;\n    }\n    setError(\"\");\n    setStep(\"confirm\");\n  };\n\n  const handleDelete = () => {\n    if (!username || !password) {\n      setError(\"Please enter username and password\");\n      return;\n    }\n\n    deleteMutation.mutate({ id: selectedItemId, username, password });\n  };\n\n  const selectedItem = items.find((item) => item._id === selectedItemId);\n\n  return (\n    <Dialog open={open} onOpenChange={handleClose}>\n      <DialogContent data-testid=\"dialog-delete\">\n        <DialogHeader>\n          <DialogTitle>\n            {step === \"select\" ? \"Select Item to Delete\" : \"Confirm Deletion\"}\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-4 pt-4\">\n          {error && (\n            <Alert variant=\"destructive\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n\n          {step === \"select\" ? (\n            <div className=\"space-y-2\">\n              <Label>Select Content Item</Label>\n              <ComboBox\n                options={itemOptions}\n                value={selectedItemId}\n                onValueChange={setSelectedItemId}\n                placeholder=\"Choose item to delete\"\n                searchPlaceholder=\"Search items...\"\n                testId=\"select-delete-item\"\n              />\n            </div>\n          ) : (\n            <>\n              <div className=\"space-y-2\">\n                <p className=\"text-sm text-muted-foreground\">\n                  You are about to delete: <strong>{selectedItem?.title}</strong>\n                </p>\n                <p className=\"text-sm text-muted-foreground\">\n                  Please enter your credentials to confirm.\n                </p>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Username</Label>\n                <Input\n                  type=\"text\"\n                  value={username}\n                  onChange={(e) => setUsername(e.target.value)}\n                  data-testid=\"input-delete-username\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Password</Label>\n                <Input\n                  type=\"password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  data-testid=\"input-delete-password\"\n                />\n              </div>\n            </>\n          )}\n        </div>\n\n        <DialogFooter>\n          {step === \"select\" ? (\n            <>\n              <Button variant=\"outline\" onClick={handleClose}>\n                Cancel\n              </Button>\n              <Button onClick={handleNext} data-testid=\"button-delete-next\">\n                Next\n              </Button>\n            </>\n          ) : (\n            <>\n              <Button variant=\"outline\" onClick={() => setStep(\"select\")}>\n                Back\n              </Button>\n              <Button\n                variant=\"destructive\"\n                onClick={handleDelete}\n                disabled={deleteMutation.isPending}\n                data-testid=\"button-delete-confirm\"\n              >\n                {deleteMutation.isPending ? \"Deleting...\" : \"Delete\"}\n              </Button>\n            </>\n          )}\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5585},"client/src/components/EditDialog.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { ComboBox } from \"@/components/ui/combobox\";\nimport type { ContentItem, Season } from \"@shared/schema\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { AlertCircle, Plus, Trash2 } from \"lucide-react\";\n\nconst categoryOptions = [\n  { value: \"Movie\", label: \"Movie\" },\n  { value: \"Anime\", label: \"Anime\" },\n  { value: \"Web Series\", label: \"Web Series\" },\n];\n\ninterface EditDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  items: ContentItem[];\n}\n\nexport function EditDialog({ open, onOpenChange, items }: EditDialogProps) {\n  const [selectedItemId, setSelectedItemId] = useState(\"\");\n  const [title, setTitle] = useState(\"\");\n  const [releaseYear, setReleaseYear] = useState(\"\");\n  const [category, setCategory] = useState(\"Movie\");\n  const [thumbnail, setThumbnail] = useState(\"\");\n  const [driveLink, setDriveLink] = useState(\"\");\n  const [seasons, setSeasons] = useState<{ episodes: string[] }[]>([{ episodes: [\"\"] }]);\n  const [error, setError] = useState(\"\");\n  const [step, setStep] = useState<\"select\" | \"edit\">(\"select\");\n\n  const queryClient = useQueryClient();\n\n  const selectedItem = items.find((item) => item._id === selectedItemId);\n  \n  const itemOptions = items.map((item) => ({\n    value: item._id,\n    label: `${item.title} (${item.category})`,\n  }));\n\n  useEffect(() => {\n    if (selectedItem && step === \"edit\") {\n      setTitle(selectedItem.title);\n      setReleaseYear(selectedItem.releaseYear ? selectedItem.releaseYear.toString() : \"\");\n      setCategory(selectedItem.category);\n      setThumbnail(selectedItem.thumbnail);\n      setDriveLink(selectedItem.driveLink || \"\");\n      \n      if (selectedItem.seasons && selectedItem.seasons.length > 0) {\n        setSeasons(\n          selectedItem.seasons.map((season) => ({\n            episodes: season.episodes.map((ep) => ep.link),\n          }))\n        );\n      } else {\n        setSeasons([{ episodes: [\"\"] }]);\n      }\n    }\n  }, [selectedItem, step]);\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: { id: string; content: any }) => {\n      const response = await fetch(`/api/content/${data.id}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data.content),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || \"Failed to update content\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/content\"] });\n      handleClose();\n    },\n    onError: (error: Error) => {\n      setError(error.message);\n    },\n  });\n\n  const handleClose = () => {\n    setSelectedItemId(\"\");\n    setTitle(\"\");\n    setReleaseYear(\"\");\n    setCategory(\"Movie\");\n    setThumbnail(\"\");\n    setDriveLink(\"\");\n    setSeasons([{ episodes: [\"\"] }]);\n    setError(\"\");\n    setStep(\"select\");\n    onOpenChange(false);\n  };\n\n  const handleNext = () => {\n    if (!selectedItemId) {\n      setError(\"Please select an item to edit\");\n      return;\n    }\n    setError(\"\");\n    setStep(\"edit\");\n  };\n\n  const handleUpdate = () => {\n    if (!title || !thumbnail || !releaseYear) {\n      setError(\"Please fill in all required fields\");\n      return;\n    }\n\n    if (category === \"Movie\" && !driveLink) {\n      setError(\"Please enter a drive link for movies\");\n      return;\n    }\n\n    const contentData = {\n      title,\n      releaseYear: parseInt(releaseYear),\n      category,\n      thumbnail,\n      driveLink: category === \"Movie\" ? driveLink : undefined,\n      seasons:\n        category !== \"Movie\"\n          ? seasons.map((season, index) => ({\n              seasonNumber: index + 1,\n              episodes: season.episodes.map((link, episodeIndex) => ({\n                episodeNumber: episodeIndex + 1,\n                link,\n              })),\n            })) as Season[]\n          : undefined,\n    };\n\n    updateMutation.mutate({ id: selectedItemId, content: contentData });\n  };\n\n  const addEpisode = (seasonIndex: number) => {\n    const newSeasons = [...seasons];\n    newSeasons[seasonIndex].episodes.push(\"\");\n    setSeasons(newSeasons);\n  };\n\n  const removeEpisode = (seasonIndex: number, episodeIndex: number) => {\n    const newSeasons = [...seasons];\n    newSeasons[seasonIndex].episodes.splice(episodeIndex, 1);\n    setSeasons(newSeasons);\n  };\n\n  const updateEpisode = (seasonIndex: number, episodeIndex: number, value: string) => {\n    const newSeasons = [...seasons];\n    newSeasons[seasonIndex].episodes[episodeIndex] = value;\n    setSeasons(newSeasons);\n  };\n\n  const addSeason = () => {\n    setSeasons([...seasons, { episodes: [\"\"] }]);\n  };\n\n  const removeSeason = (seasonIndex: number) => {\n    const newSeasons = [...seasons];\n    newSeasons.splice(seasonIndex, 1);\n    setSeasons(newSeasons);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto sm:max-w-[90vw]\" data-testid=\"dialog-edit\">\n        <DialogHeader>\n          <DialogTitle>\n            {step === \"select\" ? \"Select Item to Edit\" : `Edit: ${selectedItem?.title}`}\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-4 pt-4\">\n          {error && (\n            <Alert variant=\"destructive\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n\n          {step === \"select\" ? (\n            <div className=\"space-y-2\">\n              <Label>Select Content Item</Label>\n              <ComboBox\n                options={itemOptions}\n                value={selectedItemId}\n                onValueChange={setSelectedItemId}\n                placeholder=\"Choose item to edit\"\n                searchPlaceholder=\"Search items...\"\n                testId=\"select-edit-item\"\n              />\n            </div>\n          ) : (\n            <>\n              <div className=\"space-y-2\">\n                <Label>Title</Label>\n                <Input\n                  value={title}\n                  onChange={(e) => setTitle(e.target.value)}\n                  placeholder=\"Enter title\"\n                  data-testid=\"input-edit-title\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Release Year</Label>\n                <Input\n                  type=\"number\"\n                  value={releaseYear}\n                  onChange={(e) => setReleaseYear(e.target.value)}\n                  min=\"1900\"\n                  max=\"2100\"\n                  required\n                  data-testid=\"input-edit-release-year\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Category</Label>\n                <ComboBox\n                  options={categoryOptions}\n                  value={category}\n                  onValueChange={setCategory}\n                  placeholder=\"Select Category\"\n                  searchPlaceholder=\"Search category...\"\n                  testId=\"select-edit-category\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Thumbnail URL</Label>\n                <Input\n                  value={thumbnail}\n                  onChange={(e) => setThumbnail(e.target.value)}\n                  placeholder=\"Enter thumbnail URL\"\n                  data-testid=\"input-edit-thumbnail\"\n                />\n              </div>\n\n              {category === \"Movie\" ? (\n                <div className=\"space-y-2\">\n                  <Label>Drive Link</Label>\n                  <Input\n                    value={driveLink}\n                    onChange={(e) => setDriveLink(e.target.value)}\n                    placeholder=\"Enter Google Drive link\"\n                    data-testid=\"input-edit-drive-link\"\n                  />\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label>Seasons and Episodes</Label>\n                    <Button\n                      type=\"button\"\n                      size=\"sm\"\n                      onClick={addSeason}\n                      variant=\"outline\"\n                    >\n                      <Plus className=\"mr-2 h-4 w-4\" />\n                      Add Season\n                    </Button>\n                  </div>\n\n                  {seasons.map((season, seasonIndex) => (\n                    <div key={seasonIndex} className=\"border rounded-lg p-4 space-y-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <Label className=\"text-base font-semibold\">\n                          Season {seasonIndex + 1}\n                        </Label>\n                        {seasons.length > 1 && (\n                          <Button\n                            type=\"button\"\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            onClick={() => removeSeason(seasonIndex)}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        )}\n                      </div>\n\n                      {season.episodes.map((episode, episodeIndex) => (\n                        <div key={episodeIndex} className=\"flex gap-2 items-center\">\n                          <Label className=\"w-16 text-sm\">E{episodeIndex + 1}</Label>\n                          <Input\n                            value={episode}\n                            onChange={(e) =>\n                              updateEpisode(seasonIndex, episodeIndex, e.target.value)\n                            }\n                            placeholder=\"Episode link\"\n                          />\n                          {season.episodes.length > 1 && (\n                            <Button\n                              type=\"button\"\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              onClick={() => removeEpisode(seasonIndex, episodeIndex)}\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          )}\n                        </div>\n                      ))}\n\n                      <Button\n                        type=\"button\"\n                        size=\"sm\"\n                        onClick={() => addEpisode(seasonIndex)}\n                        variant=\"outline\"\n                      >\n                        <Plus className=\"mr-2 h-4 w-4\" />\n                        Add Episode\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </>\n          )}\n        </div>\n\n        <DialogFooter>\n          {step === \"select\" ? (\n            <>\n              <Button variant=\"outline\" onClick={handleClose}>\n                Cancel\n              </Button>\n              <Button onClick={handleNext} data-testid=\"button-edit-next\">\n                Next\n              </Button>\n            </>\n          ) : (\n            <>\n              <Button variant=\"outline\" onClick={() => setStep(\"select\")}>\n                Back\n              </Button>\n              <Button\n                onClick={handleUpdate}\n                disabled={updateMutation.isPending}\n                data-testid=\"button-edit-save\"\n              >\n                {updateMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n              </Button>\n            </>\n          )}\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":12058},"attached_assets/content-1761581927805.md":{"content":"Debug your Render services in Claude Code and Cursor.\n\n[Try Render MCP](https://render.com/docs/mcp-server)\n\n# Your fastest path to production\n\nBuild, deploy, and scale your apps with unparalleled ease – from your first user to your billionth\n\n[Get Started for Free](https://dashboard.render.com/register) [Contact Sales](https://render.com/contact)\n\nBody\n\nTrusted by over 4 million ambitious product builders and teams\n\n![Anker](https://cdn.sanity.io/images/hvk0tap5/production/e6b33dc95ed91f923693f03790a16050533dcf7c-125x40.svg?w=400&fit=max&auto=format)\n\n![CBS](https://cdn.sanity.io/images/hvk0tap5/production/d1b6194b3c089dff230cead245461deb6d270f0e-104x40.svg?w=400&fit=max&auto=format)\n\n![Watershed](https://cdn.sanity.io/images/hvk0tap5/production/2ea182c538fc0cc266148b8a0e75f90ee71c8403-162x40.svg?w=400&fit=max&auto=format)\n\n![Twilio](https://cdn.sanity.io/images/hvk0tap5/production/7715895ce3c2a8535f8281cc4bf418610cd9b38b-113x40.svg?w=400&fit=max&auto=format)\n\n![Alibaba](https://cdn.sanity.io/images/hvk0tap5/production/d96a831f185ebf3818fbad2a15af6a646fec3262-223x40.svg?w=400&fit=max&auto=format)\n\n![Bridge](https://cdn.sanity.io/images/hvk0tap5/production/99d9cf6c7f48c0214db5dbdf3c308f3b5567d5a8-307x40.svg?w=400&fit=max&auto=format)\n\n![Base 44](https://cdn.sanity.io/images/hvk0tap5/production/fc6eb4bdf23262cc509d92a59f9ae9a76451b542-134x40.svg?w=400&fit=max&auto=format)\n\n![Content Square](https://cdn.sanity.io/images/hvk0tap5/production/9226774c9cbe4fcc07636cf97332f382962ed83e-102x40.svg?w=400&fit=max&auto=format)\n\n![Portola](https://cdn.sanity.io/images/hvk0tap5/production/5820d9e6604411cebc43dacf7a37282b7307b68d-117x40.svg?w=400&fit=max&auto=format)\n\n![Warner Music Group](https://cdn.sanity.io/images/hvk0tap5/production/32c0e31143427a4a79cb1054195c67693c309f57-76x40.svg?w=400&fit=max&auto=format)\n\n![Paradigm](https://cdn.sanity.io/images/hvk0tap5/production/71607ad6cc4893f3879b1418bb2cd6c81df08ff9-148x40.svg?w=400&fit=max&auto=format)\n\n![AirGarage](https://cdn.sanity.io/images/hvk0tap5/production/ad511271e2cb29be20ab2987390e231c3ce5bf6e-118x40.svg?w=400&fit=max&auto=format)\n\n![Anker](https://cdn.sanity.io/images/hvk0tap5/production/e6b33dc95ed91f923693f03790a16050533dcf7c-125x40.svg?w=400&fit=max&auto=format)\n\n![CBS](https://cdn.sanity.io/images/hvk0tap5/production/d1b6194b3c089dff230cead245461deb6d270f0e-104x40.svg?w=400&fit=max&auto=format)\n\n![Watershed](https://cdn.sanity.io/images/hvk0tap5/production/2ea182c538fc0cc266148b8a0e75f90ee71c8403-162x40.svg?w=400&fit=max&auto=format)\n\n![Twilio](https://cdn.sanity.io/images/hvk0tap5/production/7715895ce3c2a8535f8281cc4bf418610cd9b38b-113x40.svg?w=400&fit=max&auto=format)\n\n![Alibaba](https://cdn.sanity.io/images/hvk0tap5/production/d96a831f185ebf3818fbad2a15af6a646fec3262-223x40.svg?w=400&fit=max&auto=format)\n\n![Bridge](https://cdn.sanity.io/images/hvk0tap5/production/99d9cf6c7f48c0214db5dbdf3c308f3b5567d5a8-307x40.svg?w=400&fit=max&auto=format)\n\n![Base 44](https://cdn.sanity.io/images/hvk0tap5/production/fc6eb4bdf23262cc509d92a59f9ae9a76451b542-134x40.svg?w=400&fit=max&auto=format)\n\n![Content Square](https://cdn.sanity.io/images/hvk0tap5/production/9226774c9cbe4fcc07636cf97332f382962ed83e-102x40.svg?w=400&fit=max&auto=format)\n\n![Portola](https://cdn.sanity.io/images/hvk0tap5/production/5820d9e6604411cebc43dacf7a37282b7307b68d-117x40.svg?w=400&fit=max&auto=format)\n\n![Warner Music Group](https://cdn.sanity.io/images/hvk0tap5/production/32c0e31143427a4a79cb1054195c67693c309f57-76x40.svg?w=400&fit=max&auto=format)\n\n![Paradigm](https://cdn.sanity.io/images/hvk0tap5/production/71607ad6cc4893f3879b1418bb2cd6c81df08ff9-148x40.svg?w=400&fit=max&auto=format)\n\n![AirGarage](https://cdn.sanity.io/images/hvk0tap5/production/ad511271e2cb29be20ab2987390e231c3ce5bf6e-118x40.svg?w=400&fit=max&auto=format)\n\n## Click, click, done.\n\n1\n\nChoose your service type\n\nSpin up web services, static sites, cron jobs, and more.\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/a720daac5ff5df2c089c6b5674f2969f34c47331-813x627.png?fit=max&auto=format)![](https://cdn.sanity.io/images/hvk0tap5/production/9004679d8ab1392dabb4c2897883897f4fafba16-813x627.png?fit=max&auto=format)\n\n2\n\nDeploy in seconds\n\nBuild and run your apps with lightning speed and flexible config.\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/e4a85813ecf6bdf12ca735a8233ffebf2e1f93a1-960x621.png?fit=max&auto=format)![](https://cdn.sanity.io/images/hvk0tap5/production/6e41d15173687e53a50188df5aec9544b0955867-960x621.png?fit=max&auto=format)\n\n3\n\nUpdate automatically\n\nStay current with your code thanks to seamless, automatic redeploys.\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/31efb9ea4718e42857ef33a6d9f4ccfcbf23473d-816x700.png?fit=max&auto=format)![](https://cdn.sanity.io/images/hvk0tap5/production/45e14189f17bcd9c560b0aefe926497ab4a0e3d8-816x700.png?fit=max&auto=format)\n\nWhatever your stack, it runs on Render.\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/1ffb50ecf2bb72b8ffcf3c973598afe965e4a957-47x40.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/05f6781e6a954b176d6d31dd1b60428e66baacec-55x20.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/8431bd8fb81a98f61e4445690e68a0e446eb5652-44x44.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/e50eee9a9cd8df87180afd769c360c1260377118-47x48.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/23c9204e5cf6cd814cb85f60417f85df0050bb46-43x38.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/2635c71404f99add72c526c4922111f524e9cf06-43x51.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/9e8a65dd79489055ae31c41654f535c528890a6c-20x43.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/ca02977a981b37669039b8b14516407973f97ac9-48x41.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/1ffb50ecf2bb72b8ffcf3c973598afe965e4a957-47x40.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/05f6781e6a954b176d6d31dd1b60428e66baacec-55x20.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/8431bd8fb81a98f61e4445690e68a0e446eb5652-44x44.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/e50eee9a9cd8df87180afd769c360c1260377118-47x48.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/23c9204e5cf6cd814cb85f60417f85df0050bb46-43x38.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/2635c71404f99add72c526c4922111f524e9cf06-43x51.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/9e8a65dd79489055ae31c41654f535c528890a6c-20x43.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/ca02977a981b37669039b8b14516407973f97ac9-48x41.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/1ffb50ecf2bb72b8ffcf3c973598afe965e4a957-47x40.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/05f6781e6a954b176d6d31dd1b60428e66baacec-55x20.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/8431bd8fb81a98f61e4445690e68a0e446eb5652-44x44.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/e50eee9a9cd8df87180afd769c360c1260377118-47x48.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/23c9204e5cf6cd814cb85f60417f85df0050bb46-43x38.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/2635c71404f99add72c526c4922111f524e9cf06-43x51.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/9e8a65dd79489055ae31c41654f535c528890a6c-20x43.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/ca02977a981b37669039b8b14516407973f97ac9-48x41.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/1ffb50ecf2bb72b8ffcf3c973598afe965e4a957-47x40.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/05f6781e6a954b176d6d31dd1b60428e66baacec-55x20.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/8431bd8fb81a98f61e4445690e68a0e446eb5652-44x44.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/e50eee9a9cd8df87180afd769c360c1260377118-47x48.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/23c9204e5cf6cd814cb85f60417f85df0050bb46-43x38.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/2635c71404f99add72c526c4922111f524e9cf06-43x51.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/9e8a65dd79489055ae31c41654f535c528890a6c-20x43.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/ca02977a981b37669039b8b14516407973f97ac9-48x41.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/6fca86af8e2c89b257587ccef7000469c267d190-45x48.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/9f10f0153279f5da21f904bd678607cb9c7ed5d6-43x42.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/0babc1679a4f22bf7fa381dea49530022e3bba7b-43x42.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/4742f9dcf2aceb681e4054500edb768af246fdf1-43x42.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/dd4fec6c398fddb39bcafce093a101677d8a7bde-43x42.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/2f413939513e2e04329d600164980fe4cee63961-43x42.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/ce9ae0e9f55eeb57d3d3b4ecacf21fabbe32c44c-42x42.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/65e12174266a778516ef5700d6949c7abb808b8f-43x42.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/6fca86af8e2c89b257587ccef7000469c267d190-45x48.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/9f10f0153279f5da21f904bd678607cb9c7ed5d6-43x42.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/0babc1679a4f22bf7fa381dea49530022e3bba7b-43x42.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/4742f9dcf2aceb681e4054500edb768af246fdf1-43x42.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/dd4fec6c398fddb39bcafce093a101677d8a7bde-43x42.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/2f413939513e2e04329d600164980fe4cee63961-43x42.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/ce9ae0e9f55eeb57d3d3b4ecacf21fabbe32c44c-42x42.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/65e12174266a778516ef5700d6949c7abb808b8f-43x42.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/6fca86af8e2c89b257587ccef7000469c267d190-45x48.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/9f10f0153279f5da21f904bd678607cb9c7ed5d6-43x42.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/0babc1679a4f22bf7fa381dea49530022e3bba7b-43x42.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/4742f9dcf2aceb681e4054500edb768af246fdf1-43x42.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/dd4fec6c398fddb39bcafce093a101677d8a7bde-43x42.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/2f413939513e2e04329d600164980fe4cee63961-43x42.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/ce9ae0e9f55eeb57d3d3b4ecacf21fabbe32c44c-42x42.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/65e12174266a778516ef5700d6949c7abb808b8f-43x42.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/6fca86af8e2c89b257587ccef7000469c267d190-45x48.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/9f10f0153279f5da21f904bd678607cb9c7ed5d6-43x42.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/0babc1679a4f22bf7fa381dea49530022e3bba7b-43x42.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/4742f9dcf2aceb681e4054500edb768af246fdf1-43x42.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/dd4fec6c398fddb39bcafce093a101677d8a7bde-43x42.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/2f413939513e2e04329d600164980fe4cee63961-43x42.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/ce9ae0e9f55eeb57d3d3b4ecacf21fabbe32c44c-42x42.svg?w=100&fit=max&auto=format)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/65e12174266a778516ef5700d6949c7abb808b8f-43x42.svg?w=100&fit=max&auto=format)\n\n## Build with speed\n\nLink your repo and go live—then iterate with every push.\n\n[Learn More](https://render.com/platform)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/108a2a3a856d5f5fdaf5cd7b4f448734df95ee5f-50x50.svg?w=100&fit=max&auto=format)\n\nAutomatic Deploys\n\nYour app is automatically updated on every push, with zero downtime.\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/d6789c982c36fa550c1623b4f0168d39f4fc9999-50x50.svg?w=100&fit=max&auto=format)\n\nNative Language Runtimes\n\nRun in managed environments for Node.js, Python, Ruby, and more—or deploy a Docker image and run anything under the sun.\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/3efc8cc52efc8261e522e865a19c5e119a4c7046-50x50.svg?w=100&fit=max&auto=format)\n\nEnterprise-Grade Datastores\n\nProvision highly available Postgres with point-in-time recovery. Create Redis®-compatible caches with Render Key Value.\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/d07d06566246a418bbf69719ec796da979ae132a-50x50.svg?w=100&fit=max&auto=format)\n\nPrivate Network\n\nCommunicate securely across services using any protocol, without traversing the public Internet.\n\n## Scale with confidence\n\nGrow your infrastructure, team, and business with a platform that scales alongside you.\n\n[Learn More](https://render.com/platform)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/b432261ad42d833a80594faf436f34651c0b2159-50x50.svg?w=100&fit=max&auto=format)\n\nLoad-Based Autoscaling\n\nAdd and remove instances of your service automatically as traffic patterns change.\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/bfaa898077bdd65fcaa7516dacf0a21bff5fb472-50x50.svg?w=100&fit=max&auto=format)\n\nInfrastructure as Code\n\nDefine the entirety of your infrastructure in a single Blueprint file and quickly replicate it across environments.\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/3f61af94f30ff59b24399574e01119c2300f61c6-50x50.svg?w=100&fit=max&auto=format)\n\nDDoS Protection\n\nDefend against denial-of-service attacks simply by hosting on Render—no additional setup required.\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/1ab4ffd26e8fbde89ae2a90b53c4078223e7bff6-50x50.svg?w=100&fit=max&auto=format)\n\nData Privacy\n\nKeep data secure for yourself and your customers with full GDPR and SOC 2 Type II compliance.\n\n## Ship together\n\nCollaborate with your team on everything from one-line fixes to full-scale migrations.\n\n[Learn More](https://render.com/platform)\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/e9aaf94fa314858487f3fdd331b2430f161b3788-50x50.svg?w=100&fit=max&auto=format)\n\nProject Organization\n\nGroup your services logically and set up production, staging, and other environments.\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/41f8882d8e70a1e60c814c69201d1f9021a61050-50x50.svg?w=100&fit=max&auto=format)\n\nPreview Environments\n\nTest out your team’s pull requests in standalone instances, or even spin up temporary copies of your entire production environment.\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/0509faa8f23788304f14a3a3230cc1c11984427d-50x50.svg?w=100&fit=max&auto=format)\n\nPlatform Notifications\n\nConnect your Slack workplace to stay informed about deployment activity and service hiccups across your team.\n\n![](https://cdn.sanity.io/images/hvk0tap5/production/d7299d90d0fe68fd84b46fdb19a5bd9f775bd044-50x50.svg?w=100&fit=max&auto=format)\n\nRole-Based Access\n\nLimit who can manage your team’s billing, security settings, and more.\n\n![Photo of Mitchell Hashimoto - Co-Founder at Hashicorp](https://cdn.sanity.io/images/hvk0tap5/production/6c945bf43f176d1c926d0b40399eed4c431a6786-1080x1080.png?w=720&fm=webp&fit=max&auto=format)\n\n“Easier than large clouds, more feature-rich than single-purpose hosting providers, Render lets me ship the entirety of my projects in one place.”\n\nMitchell Hashimoto,Co-FounderofHashicorp\n\n5M+\n\nLive Services\n\n100B+\n\nHTTP Requests Per Month\n\n100M+\n\nDeploys","size_bytes":17305},"RENDER_DEPLOYMENT_CHECKLIST.md":{"content":"# Quick Fix Checklist for Render.com Deployment\n\n## The Issue\nYour app works locally but fails on Render because **environment variables are missing**. Without `MONGODB_URI`, the app uses temporary in-memory storage that gets wiped on every restart.\n\n## Quick Fix Steps\n\n### 1️⃣ Add Environment Variables on Render (CRITICAL)\n\nGo to your Render dashboard → Your Service → Environment tab and add:\n\n**MONGODB_URI** (Required)\n```\nmongodb+srv://your-username:your-password@your-cluster.mongodb.net/?retryWrites=true&w=majority\n```\n- Get this from MongoDB Atlas dashboard → Connect → Connect your application\n- Replace `your-username` and `your-password` with actual credentials\n\n**SESSION_SECRET** (Required)\n```\nyour-random-secret-key-make-it-at-least-32-characters-long\n```\n- Use any long random string (32+ characters)\n- Example: `my-super-secret-key-for-production-mlwio-2024`\n\n**NODE_ENV** (Required)\n```\nproduction\n```\n\n**PORT** (Optional, defaults to 5000)\n```\n5000\n```\n\n### 2️⃣ Allow Render to Connect to MongoDB Atlas\n\n1. Go to [MongoDB Atlas](https://cloud.mongodb.com/)\n2. Click on \"Network Access\" in left sidebar\n3. Click \"Add IP Address\"\n4. Select \"Allow Access from Anywhere\" (0.0.0.0/0)\n5. Click \"Confirm\"\n\n### 3️⃣ Verify Build Commands on Render\n\nIn your Render service settings:\n- **Build Command**: `npm install && npm run build`\n- **Start Command**: `npm run start`\n\n### 4️⃣ Redeploy\n\nAfter adding the environment variables, Render will automatically redeploy. Watch the logs for:\n- ✅ `✓ Connected to MongoDB Atlas` ← This confirms database is working\n- ✅ `Server running on http://0.0.0.0:5000` ← Server is ready\n\n## Expected Behavior After Fix\n\n✅ Login persists across page refreshes\n✅ Dashboard loads content from MongoDB\n✅ Uploads are saved and persist\n✅ Data survives deployments and restarts\n\n## Still Not Working?\n\n### Check Render Logs\nLook for these error messages:\n- `MONGODB_URI not set` → Environment variable missing\n- `Failed to connect to MongoDB` → Check MongoDB connection string\n- `MongoServerError` → Check MongoDB Atlas network access\n\n### Verify MongoDB Connection String\nYour connection string should:\n- Start with `mongodb+srv://`\n- Include correct username and password (no `<` `>` brackets)\n- Include your cluster address\n- End with `?retryWrites=true&w=majority`\n\n### Common Mistakes\n❌ Forgot to replace `<username>` and `<password>` in connection string\n❌ MongoDB Atlas not allowing connections from anywhere\n❌ Wrong `SESSION_SECRET` (too short or missing)\n❌ `NODE_ENV` set to `development` instead of `production`\n\n## Example Environment Variables Setup\n\nHere's what it should look like on Render:\n\n| Key | Value |\n|-----|-------|\n| MONGODB_URI | `mongodb+srv://mlwio:MySecurePass123@cluster0.abc123.mongodb.net/?retryWrites=true&w=majority` |\n| SESSION_SECRET | `mlwio-production-secret-key-2024-very-secure-random-string` |\n| NODE_ENV | `production` |\n| PORT | `5000` |\n\nThat's it! Your deployment should now work exactly like it does locally.\n","size_bytes":3048},"DEPLOYMENT.md":{"content":"# Deployment Guide for Render.com\n\n## Prerequisites\n- A MongoDB Atlas account with a cluster set up\n- A Render.com account\n\n## Step 1: Get Your MongoDB Connection String\n\n1. Log in to [MongoDB Atlas](https://cloud.mongodb.com/)\n2. Click on \"Connect\" for your cluster\n3. Choose \"Connect your application\"\n4. Copy the connection string (it looks like: `mongodb+srv://<username>:<password>@<cluster>.mongodb.net/?retryWrites=true&w=majority`)\n5. Replace `<password>` with your actual database password\n6. Replace `<username>` with your database username\n\n## Step 2: Configure Environment Variables on Render\n\n1. Go to your Render.com dashboard\n2. Select your web service\n3. Go to the \"Environment\" tab\n4. Add the following environment variables:\n\n### Required Environment Variables:\n\n```\nMONGODB_URI=mongodb+srv://<username>:<password>@<cluster>.mongodb.net/?retryWrites=true&w=majority\n```\n**IMPORTANT**: Replace `<username>` and `<password>` with your actual MongoDB credentials\n\n```\nSESSION_SECRET=your-random-secret-key-here-make-it-long-and-secure\n```\n**IMPORTANT**: Generate a strong random string (at least 32 characters)\n\n```\nNODE_ENV=production\n```\n\n```\nPORT=5000\n```\n\n## Step 3: Configure Build Settings on Render\n\nMake sure your Render service has these settings:\n\n- **Build Command**: `npm install && npm run build`\n- **Start Command**: `npm run start`\n- **Auto-Deploy**: Yes (optional, deploys on git push)\n\n## Step 4: Verify Deployment\n\nAfter adding the environment variables:\n\n1. Render will automatically redeploy your application\n2. Check the deployment logs for:\n   - `✓ Connected to MongoDB Atlas` (confirms database connection)\n   - `✅ Server running on http://0.0.0.0:5000` (confirms server started)\n\n3. Test your application:\n   - Login should work\n   - Dashboard should load data from MongoDB\n   - Uploads should persist after page refresh\n\n## Troubleshooting\n\n### Issue: \"MONGODB_URI not set. Using in-memory storage.\"\n**Solution**: Make sure you added `MONGODB_URI` in Render's environment variables and redeployed.\n\n### Issue: Login works but data doesn't persist\n**Solution**: Verify the MongoDB connection string is correct and your MongoDB Atlas cluster allows connections from anywhere (0.0.0.0/0) in Network Access settings.\n\n### Issue: Session/Authentication errors\n**Solution**: \n- Make sure `SESSION_SECRET` is set\n- Verify your MongoDB cluster is accessible\n- Check that `NODE_ENV=production` is set\n\n### Issue: Can't connect to MongoDB from Render\n**Solution**: \n1. Go to MongoDB Atlas → Network Access\n2. Click \"Add IP Address\"\n3. Select \"Allow Access from Anywhere\" (0.0.0.0/0)\n4. Save changes\n\n## Security Notes\n\n- Never commit `.env` file to git (it's in `.gitignore`)\n- Use strong, unique values for `SESSION_SECRET` in production\n- Regularly rotate your MongoDB credentials\n- Keep your MongoDB Atlas network access restricted to known IPs when possible\n\n## Need Help?\n\n- Check Render logs for error messages\n- Verify MongoDB Atlas connection string is correct\n- Ensure all environment variables are set exactly as shown above\n","size_bytes":3071},".local/state/replit/agent/progress_tracker.md":{"content":"[x] 1. Install the required packages\n[x] 2. Restart the workflow to see if the project is working\n[x] 3. Verify the project is working using the screenshot tool\n[x] 4. Inform user the import is completed and they can start building\n[x] 5. Fixed MongoDB session storage configuration\n[x] 6. Fixed 401 Unauthorized error by implementing persistent sessions\n[x] 7. Created comprehensive README with setup instructions\n[x] 8. Created .env.example template for environment variables\n[x] 9. Created Render.com deployment guide with environment variable setup\n[x] 10. Created quick fix checklist for Render deployment issues\n[x] 11. Fixed server host binding from 127.0.0.1 to 0.0.0.0 for Replit compatibility\n[x] 12. Verified workflow is running successfully on port 5000\n[x] 13. Confirmed application frontend is accessible and displaying correctly\n[x] 14. Completed migration from Replit Agent to Replit environment\n[x] 15. Fixed session cookie domain restriction that was causing 401 errors on Render\n[x] 16. Removed session ID logging to prevent session hijacking vulnerability\n[x] 17. Added session store configuration logging for debugging\n[x] 18. Modified logging system to show only newly uploaded content, ordered newest first","size_bytes":1229},"client/src/components/ui/combobox.tsx":{"content":"import { useState } from \"react\"\nimport { Check, ChevronsUpDown } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\"\n\nexport interface ComboBoxOption {\n  value: string\n  label: string\n}\n\ninterface ComboBoxProps {\n  options: ComboBoxOption[]\n  value: string\n  onValueChange: (value: string) => void\n  placeholder?: string\n  searchPlaceholder?: string\n  emptyText?: string\n  className?: string\n  testId?: string\n}\n\nexport function ComboBox({\n  options,\n  value,\n  onValueChange,\n  placeholder = \"Select option...\",\n  searchPlaceholder = \"Search...\",\n  emptyText = \"No option found.\",\n  className,\n  testId,\n}: ComboBoxProps) {\n  const [open, setOpen] = useState(false)\n\n  const selectedOption = options.find((option) => option.value === value)\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          className={cn(\"w-full justify-between\", className)}\n          data-testid={testId}\n        >\n          {selectedOption ? selectedOption.label : placeholder}\n          <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-full p-0\" align=\"start\">\n        <Command>\n          <CommandInput placeholder={searchPlaceholder} />\n          <CommandList>\n            <CommandEmpty>{emptyText}</CommandEmpty>\n            <CommandGroup>\n              {options.map((option) => (\n                <CommandItem\n                  key={option.value}\n                  value={option.value}\n                  onSelect={(currentValue) => {\n                    onValueChange(currentValue === value ? \"\" : currentValue)\n                    setOpen(false)\n                  }}\n                  data-testid={`${testId}-option-${option.value}`}\n                >\n                  <Check\n                    className={cn(\n                      \"mr-2 h-4 w-4\",\n                      value === option.value ? \"opacity-100\" : \"opacity-0\"\n                    )}\n                  />\n                  {option.label}\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  )\n}\n","size_bytes":2558},"client/src/components/VideoPlayerDialog.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport type { ContentItem } from \"@shared/schema\";\n\ninterface VideoPlayerDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  item: ContentItem | null;\n  videoUrl?: string;\n}\n\nexport function VideoPlayerDialog({ open, onOpenChange, item, videoUrl }: VideoPlayerDialogProps) {\n  if (!item) return null;\n\n  const getEmbedUrl = (url: string) => {\n    if (url.includes('drive.google.com')) {\n      const fileId = url.match(/[-\\w]{25,}/)?.[0];\n      if (fileId) {\n        return `https://drive.google.com/file/d/${fileId}/preview`;\n      }\n    }\n    return url;\n  };\n\n  const embedUrl = videoUrl ? getEmbedUrl(videoUrl) : '';\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-5xl max-h-[90vh] p-0\">\n        <DialogHeader className=\"px-6 pt-6 pb-4\">\n          <DialogTitle className=\"text-xl font-bold\">\n            {item.title} {item.releaseYear && `(${item.releaseYear})`}\n          </DialogTitle>\n          <p className=\"text-sm text-muted-foreground\">{item.category}</p>\n        </DialogHeader>\n        \n        <div className=\"aspect-video bg-black\">\n          {embedUrl ? (\n            <iframe\n              src={embedUrl}\n              className=\"w-full h-full\"\n              allow=\"autoplay; encrypted-media\"\n              allowFullScreen\n              data-testid={`video-player-${item._id}`}\n            />\n          ) : (\n            <div className=\"w-full h-full flex items-center justify-center text-white\">\n              <p>Video URL not available</p>\n            </div>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":1716},"client/src/components/SeriesPlayerDialog.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport type { ContentItem } from \"@shared/schema\";\n\ninterface SeriesPlayerDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  item: ContentItem | null;\n}\n\nexport function SeriesPlayerDialog({ open, onOpenChange, item }: SeriesPlayerDialogProps) {\n  const [selectedEpisode, setSelectedEpisode] = useState<{ seasonNum: number; episodeNum: number; link: string } | null>(null);\n\n  if (!item || !item.seasons) return null;\n\n  const getEmbedUrl = (url: string) => {\n    if (url.includes('drive.google.com')) {\n      const fileId = url.match(/[-\\w]{25,}/)?.[0];\n      if (fileId) {\n        return `https://drive.google.com/file/d/${fileId}/preview`;\n      }\n    }\n    return url;\n  };\n\n  const handleEpisodeClick = (seasonNum: number, episodeNum: number, link: string) => {\n    setSelectedEpisode({ seasonNum, episodeNum, link });\n  };\n\n  const handleBack = () => {\n    setSelectedEpisode(null);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={(newOpen) => {\n      if (!newOpen) {\n        setSelectedEpisode(null);\n      }\n      onOpenChange(newOpen);\n    }}>\n      <DialogContent className=\"max-w-5xl max-h-[90vh] overflow-hidden flex flex-col\">\n        <DialogHeader className=\"px-6 pt-6 pb-4\">\n          <DialogTitle className=\"text-xl font-bold\">\n            {item.title} {item.releaseYear && `(${item.releaseYear})`}\n          </DialogTitle>\n          <p className=\"text-sm text-muted-foreground\">{item.category}</p>\n        </DialogHeader>\n        \n        {selectedEpisode ? (\n          <div className=\"flex-1 flex flex-col\">\n            <div className=\"px-6 pb-3\">\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                onClick={handleBack}\n                data-testid=\"button-back-to-episodes\"\n              >\n                ← Back to Episodes\n              </Button>\n              <p className=\"text-sm text-muted-foreground mt-2\">\n                Season {selectedEpisode.seasonNum} • Episode {selectedEpisode.episodeNum}\n              </p>\n            </div>\n            <div className=\"aspect-video bg-black\">\n              <iframe\n                src={getEmbedUrl(selectedEpisode.link)}\n                className=\"w-full h-full\"\n                allow=\"autoplay; encrypted-media\"\n                allowFullScreen\n                data-testid={`video-player-s${selectedEpisode.seasonNum}-e${selectedEpisode.episodeNum}`}\n              />\n            </div>\n          </div>\n        ) : (\n          <div className=\"flex-1 overflow-y-auto px-6 pb-6\">\n            <div className=\"space-y-6\">\n              {item.seasons.map((season) => (\n                <div key={season.seasonNumber} className=\"space-y-3\">\n                  <h3 className=\"font-semibold text-base\">\n                    Season {season.seasonNumber}\n                  </h3>\n                  <div className=\"grid grid-cols-4 sm:grid-cols-6 md:grid-cols-8 gap-2\">\n                    {season.episodes.map((episode) => (\n                      <Button\n                        key={episode.episodeNumber}\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleEpisodeClick(season.seasonNumber, episode.episodeNumber, episode.link)}\n                        className=\"text-xs h-9\"\n                        data-testid={`button-episode-${item._id}-${season.seasonNumber}-${episode.episodeNumber}`}\n                      >\n                        E{episode.episodeNumber.toString().padStart(2, '0')}\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":3891}},"version":2}